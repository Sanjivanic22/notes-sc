O-R mapping
==============
it is all about mapping or linking classes with db tables
the process of mapping java claasess with db tables ,member variable of java java classes with column of db table.
and representing the recordes of db tables with the object of java classes having synchronization b/w them is called O-R mapping.

Hibernate
==============
is a open source,lightweight,portable and noninvasive and integrated java based orm framework or tool that is given given based i
JPA specification rules and guidelines to develope object based o-r mapping perstence logics

hibernate configuration file
--------------------------------------
This file contains info abpout ,how hibernate f/w should locate and establish the connection with DB s/w i.e we specify jdbc driverr details
(jdbc username,password,jdbc rules jdbcdriver classname )
this file is used to given common instruction to hibernate f/w like enabling autocommit,eabling caches,enabling sql queries show and etc

hibernate mapping file
===============================
Thos file contains diff o-r mapping cfgs like mapping entity classes with DB tables and mapping properties of
entity classes with columns of DB tables

featurs of HIbernate framework
========================================
Allow to develop object based DB s/w independant o-r mapping persistence logic without any sql queries
avoid jdbc boilerplate code
support both xml and annotation driven cfgs
the entity classes of hibernate are non-invasive i.e they can moved and used in other frameworks.
All exception in hiberante are unchecked ,so no need of catching and handling method
Support versoning and timestamping
Support both single row and bulk row operations.
Auto schema generation.

3 important object of hibernate persistence logic
=====================================================
configuration object
-------------------------
by creating bject of this class we can activate hibernate f/w by collecting hibernate jars/libraries from the classpath or
buld path.using this object we can create HB session factory object.
configuration config=new configuration ();

SessionFcatory object
--------------------
this object designed based on th factory design pattern abstraction towords session object creation.
it is heavy weight object bec it contains multiple small object representing diff comp and services.
session factory object is thread safe.

Session object
===================
it is con++ object i.e it contains jdbc con object that is collected jdbc con pool represeted by session factory object and lots o-r mapping metadata
info.create dthrough session factory object
it is base object for programmer to give persstence instruction to hibernate f/w using etity class objects.

Dialects
================
it is comp of hiberante f/w that is capable of genertaing both pregenerted /static and dynamic sql queries.
Dialect are useful to generate optimized sql queries as required for the underlaying DB s/w
used to assign sesnible,intelligent default values to the configuration properties which are not specifies in hibertanet
cfg file.


JPA is s/w specification that provides bunch of rules and guidelines t develop ORM s/w or tools
@Entity-to mark given java class as model class
@table-to map entity class with DB table
@Id-to mark entity class peprperty as id property
@column-to map each property with DB table column
@Type-to specify hibernate data type
@Transient-to make certain property not participating persistence operations
@DynamicInsert/update makes hibernate dialect to generate sql query dynamically only by involving those
properties whose values are not null


HibernateUtil class
=====================
Utility classes are helper classes that required in multiple parts of project representing boilerplate code
Generators in HB
increment
if DB is empty then it generate 1 as the identity value
Bulk operation in HB
to select or manipulate 1 or more records/object having our choice criteria values we need to go for Bulk oprtaion concept
a)Hql/jpql
it is object based query language.these query will be written by using entity class names and their property names
HB dialect internally convert HQL queries into DB specific sql queries
b)Native sql query
c)criteria API or QBC

Pagination
The process of displaying no.of records page bypage is called pagination.this avaoid loading all records.
i.e load only those records/object that are required to display in the current package to improve performance
whiat is problem of granularity
if we design classes having composition and db table without user defined datatypes i.e designing db table with more column.make the programmmer
to map more java classes with single DB table but basic o-r mapping does not support that process.so it is called problem of granularity
to address this use component mapping.


Association mapping
if we keep db tables in relationship with their relevent entity classes should kept relationship by mapping them through association mapping
one to many unidirectional association mapping
since we want to impletement one to may unidirectional association having parent to child navigation.so parent entity class should
have special collection type property to hold multiple object of child class.

4) What are the core interfaces of Hibernate?
The core interfaces of Hibernate framework are:
	• Configuration
	• Configuration is a class which is present in org.hibernate.cfg package. It activates Hibernate framework. It reads both configuration file and mapping files.
	
	It activate Hibernate Framework
=======================================
Configuration cfg=new Configuration();
It read both cfg file and mapping files
cfg.configure();
	• It checks whether the config file is syntactically correct or not.
	• If the config file is not valid then it will throw an exception. If it is valid then it creates a meta-data in memory and returns the meta-data to object to represent the config file.
	
	SessionFactory:
====================
	• SessionFactory is an Interface which is present in org.hibernate package and it is used to create Session Object.
	• It is immutable and thread-safe in nature.
	buildSessionFactory() method gathers the meta-data which is in the cfg Object. 
From cfg object it takes the JDBC information and create a JDBC Connection.
SessionFactory factory=cfg.buildSessionFactory();
	
	Session:
===============
	• it is base object for programmer to give persstence instruction to hibernate f/w using etity class objects.
	
	• Session is an interface which is present in org.hibernate package. Session object is created based upon SessionFactory object i.e. factory.
	• It opens the Connection/Session with Database software through Hibernate Framework.
	• It is a light-weight object and it is not thread-safe.
	• Session object is used to perform CRUD operations.
	Session session=factory.buildSession();
	
	Query
==============
	• Query is an interface that present inside org.hibernate package.
	• A Query instance is obtained by calling Session.createQuery().
	• This interface exposes some extra functionality beyond that provided by Session.iterate() and Session.find():
	1. A particular page of the result set may be selected by calling setMaxResults(), setFirstResult().
	2. Named query parameters may be used.
	
	
	• Criteria
	• Criteria is a simplified API for retrieving entities by composing Criterion objects.
	• The Session is a factory for Criteria. Criterion instances are usually obtained via the factory methods on Restrictions.
	
	Transaction

• Transaction object is used whenever we perform any operation and based upon that operation there is some change in database.
• Transaction object is used to give the instruction to the database to make the changes that happen because of operation as a permanent by using commit() method.
Transaction tx=session.beginTransaction();
tx.commit();

Cascadig in hibernate
=================================
Cascading is a feature in Hibernate, which is an object-relational mapping (ORM) tool used in Java to map Java classes to database tables. Cascading refers to the ability to automatically propagate the state of an entity (i.e., an instance of a mapped class) across associations between entities. For example, if you have a Customer entity that has a one-to-many relationship with an Order entity, you can define cascading to specify that when a customer is deleted, all of their orders should be deleted as well.
Cascading in Hibernate refers to the automatic persistence of related entities. When a change is made to an entity, such as an update or deletion, the changes can be cascaded to related entities as well. Cascading can be configured using annotations, such as @OneToMany(cascade = CascadeType.ALL), or through XML configuration files. It is important to use cascading carefully, as it can lead to unwanted changes being made to related entities if not configured properly.
Different Cascade Types in Hibernate
Hibernate provides several types of cascade options that can be used to manage the relationships between entities. Here are the different cascade types in Hibernate:
2. CascadeType.ALL
3. CascadeType.PERSIST
4. CascadeType.MERGE
5. CascadeType.REMOVE
6. CascadeType.REFRESH
7. CascadeType.DETACH
8. CascadeType.REPLICATE
9. CascadeType.SAVE_UPDATE
These cascade types can be used individually or in combination to manage the relationships between entities based on the requirements of the application. It is important to use cascade types carefully, as they can lead to unintended consequences if not used properly.
1. CascadeType.ALL
• CascadeType.ALL is a cascading type in Hibernate that specifies that all state transitions (create, update, delete, and refresh) should be cascaded from the parent entity to the child entities.
• When CascadeType.ALL is used, and any operation performed on the parent entity will be automatically propagated to all child entities. This means that if you persist, update, or delete a parent entity, all child entities associated with it will also be persisted, updated, or deleted accordingly.
• For example, consider a scenario where you have a Customer entity with a one-to-many relationship to Order entities. By using CascadeType.ALL, any operation performed on the Customer entity (such as persist, merge, remove, or refresh) will also be propagated to all associated Order entities.
• Here’s an example of how CascadeType.ALL can be used:


Save 
Can generate the generated id value as seriazable wrapper object
Return type is seriazable
Can work with generator to gennerate the value to id/identity property dynamically
It is direct method of hB f/w
Cannot give guarantee for this method availability in all ORM f/w
Signature:
Public seriazable save(Object obj)

Persist
Cannot return id value
Return type is void
Cannot work with generator
It is gathered an implemented by collecting from jpa specification
Available in multiple ORM f/w
Signatue :
Public void persist(Object obj)

SES.GET()&SES.LOAD()
-================================
Ses.get()
	• Prform eager loading of object 
	• Cannot generate proxy class
	• Returns null ,if the record not availabe to load
	• Suitable to verify whether record is availbe or not
	• Hits the DB s/w the moment get() method is called
	• Creates only one objct for entity class
	• No way related  to lazy attribute of <class>tag
	• No way related to proxy attribute
	
Ses.load()
	• Prform lazy loading of object by default can also perform eagger loading
	• Can generate the proxy class
	• Throws ObjectNotFoundException indirectly
	• Not suitable
	• First return the proxy object and hits the DB s/w  only when non-identifier method are called on proxy object.
	• Creaes two object 1 proxy and 1 entity obj
	• Lazy="true"(default) perform lazy loading
	• Lazy=false   perform eager loading
	• If we specify proxy interface name in the proxy attricbute the proxy class will be generated based on proxy interface,this allows to take our entity class as final class
	
	• Prefer using ses.load() in layered apps.  The records asked in DAO class is actualy will be displayed either in the client app/int the view comp(jsp),so DAO gives proxy project to client app/view component by calling ses.load() and the real hit to DB s/w takes place when non-identifier ethods are called on proxy object from client app/biew comp.  

Q: What is Hibernate? 
A: Hibernate is an object-relational mapping (ORM) tool for Java that provides a framework for mapping object-oriented domain models to relational databases.

Q: What are the benefits of using Hibernate? 
A: Some benefits of using Hibernate include 
increased productivity, improved performance, reduced database access code, and improved maintainability.

Q: What is the SessionFactory in Hibernate? 
A: The SessionFactory in Hibernate is responsible for creating and managing sessions.

Q: What is a Session in Hibernate? 
A: A Session in Hibernate is a single-threaded object that represents a connection to the database and provides methods for querying and persisting objects.

Q: What is an Entity in Hibernate? 
A: An Entity in Hibernate is a Java class that is mapped to a database table.

Q: What is an Identifier in Hibernate?
 A: An Identifier in Hibernate is a unique identifier that is used to identify an Entity.

Q: What is a Mapping in Hibernate?
 A: A Mapping in Hibernate is the process of mapping an Entity to a database table.

Q: What is a HQL in Hibernate? 
A: HQL (Hibernate Query Language) is a query language that is used to perform database operations in Hibernate.

Q: What is a Criteria API in Hibernate? 
A: The Criteria API in Hibernate is an alternative to HQL that provides a type-safe way to construct queries.

Q: What is a Cache in Hibernate? 
A: A Cache in Hibernate is a mechanism that is used to store frequently accessed data in memory to improve performance.

Q: What is Lazy Loading in Hibernate? 
A: Lazy Loading in Hibernate is a technique that is used to defer the loading of associated objects until they are actually needed.
1. lazy=true: This attribute suggests that the proxy object will be created lazily, i.e., it will be instantiated only when it is actually needed. This can be useful for improving performance by deferring the creation of the proxy until it is necessary.


Q: What is Eager Loading in Hibernate? 
A: Eager Loading in Hibernate is a technique that is used to load all associated objects immediately along with the parent object.

Q: What is a Session Cache in Hibernate? 
A: The Session Cache in Hibernate is a cache that is used to store the data that is loaded during a session.

Q: What is a Second-Level Cache in Hibernate?
 A: The Second-Level Cache in Hibernate is a cache that is used to store data that is shared across multiple sessions.

Q: What is a Transaction in Hibernate? 
A: A Transaction in Hibernate is a unit of work that consists of one or more database operations that are executed as a single, atomic operation.


• Java

@OneToMany(mappedBy="customer", cascade=CascadeType.ALL)
private Set<Order> orders;
• This code defines a one-to-many relationship between a Customer entity and an Order entity and specifies that all state transitions should be cascaded to the associated orders. This means that when a Customer entity is saved, updated, or deleted, all of its associated Order entities will also be saved, updated, or deleted accordingly.
2. CascadeType.PERSIST
• CascadeType.PERSIST is a cascading type in Hibernate that specifies that the create (or persist) operation should be cascaded from the parent entity to the child entities.
• When CascadeType.PERSIST is used, any new child entities associated with a parent entity will be automatically persisted when the parent entity is persisted. However, updates or deletions made to the parent entity will not be cascaded to the child entities.
• For example, consider a scenario where you have a Customer entity with a one-to-many relationship to Order entities. By using CascadeType.PERSIST, any new Order entities associated with a Customer entity will be persisted when the Customer entity is persisted. However, if you update or delete a Customer entity, any associated Order entities will not be automatically updated or deleted.
• Here’s an example of how CascadeType.PERSIST can be used:
• Java

@OneToMany(mappedBy="customer", cascade=CascadeType.PERSIST)
private Set<Order> orders;
• This code defines a one-to-many relationship between a Customer entity and an Order entity and specifies that the persistent operation should be cascaded to the associated orders. This means that when a Customer entity is persisted, any new Order entities associated with it will also be persisted automatically. However, updates or deletions made to the Customer entity will not be cascaded to the associated Order entities.
3. CascadeType.MERGE
• CascadeType.MERGE is a cascading type in Hibernate that specifies that the update (or merge) operation should be cascaded from the parent entity to the child entities.
• When CascadeType.MERGE is used, any changes made to a detached parent entity (i.e., an entity that is not currently managed by the persistence context) will be automatically merged with its associated child entities when the parent entity is merged back into the persistence context. However, new child entities that are not already associated with the parent entity will not be automatically persisted.
• For example, consider a scenario where you have a Customer entity with a one-to-many relationship to Order entities. By using CascadeType.MERGE, any changes made to a detached Customer entity (such as changes made in a different session or transaction) will be automatically merged with its associated Order entities when the Customer entity is merged back into the persistence context.
• Here’s an example of how CascadeType.MERGE can be used:
• Java

@OneToMany(mappedBy="customer", cascade=CascadeType.MERGE)
private Set<Order> orders;
• This code defines a one-to-many relationship between a Customer entity and an Order entity and specifies that the merge operation should be cascaded to the associated orders. This means that when a detached Customer entity is merged back into the persistence context, any changes made to the Customer entity will be automatically merged with its associated Order entities. However, new Order entities that are not already associated with the Customer entity will not be automatically persisted.
4. CascadeType.REMOVE
• CascadeType.REMOVE is a cascading type in Hibernate that specifies that the delete operation should be cascaded from the parent entity to the child entities.
• When CascadeType.REMOVE is used, any child entities associated with a parent entity will be automatically deleted when the parent entity is deleted. However, updates or modifications made to the parent entity will not be cascaded to the child entities.
• For example, consider a scenario where you have a Customer entity with a one-to-many relationship to Order entities. By using CascadeType.REMOVE, any Order entities associated with a Customer entity will be automatically deleted when the Customer entity is deleted.
• Here’s an example of how CascadeType.REMOVE can be used:
• Java

@OneToMany(mappedBy="customer", cascade=CascadeType.REMOVE)
private Set<Order> orders;
• This code defines a one-to-many relationship between a Customer entity and an Order entity and specifies that the remove operation should be cascaded to the associated orders. This means that when a Customer entity is deleted, any associated Order entities will also be deleted automatically. However, updates or modifications made to the Customer entity will not be cascaded to the associated Order entities.
5. CascadeType.REFRESH
• CascadeType.REFRESH is a cascading type in Hibernate that specifies that the refresh operation should be cascaded from the parent entity to the child entities.
• When CascadeType.REFRESH is used, any child entities associated with a parent entity will be automatically refreshed when the parent entity is refreshed. This means that the latest state of the child entities will be loaded from the database and any changes made to the child entities will be discarded.
• For example, consider a scenario where you have a Customer entity with a one-to-many relationship to Order entities. By using CascadeType.REFRESH, any associated Order entities will be automatically refreshed when the Customer entity is refreshed.
• Here’s an example of how CascadeType.REFRESH can be used:
• Java

@OneToMany(mappedBy="customer", cascade=CascadeType.REFRESH)
private Set<Order> orders;
• This code defines a one-to-many relationship between a Customer entity and an Order entity and specifies that the refresh operation should be cascaded to the associated orders. This means that when a Customer entity is refreshed, any associated Order entities will also be refreshed automatically. Any changes made to the Order entities will be discarded, and the latest state of the Order entities will be loaded from the database.
6. CascadeType.DETACH
• CascadeType.DETACH is a cascading type in Hibernate that specifies that the detach operation should be cascaded from the parent entity to the child entities.
• When CascadeType.DETACH is used, any child entities associated with a parent entity will be automatically detached when the parent entity is detached. This means that the child entities will become detached from the persistence context and their state will no longer be managed by Hibernate.
• For example, consider a scenario where you have a Customer entity with a one-to-many relationship to Order entities. By using CascadeType.DETACH, any associated Order entities will be automatically detached when the Customer entity is detached.
• Here’s an example of how CascadeType.DETACH can be used:
• Java

@OneToMany(mappedBy="customer", cascade=CascadeType.DETACH)
private Set<Order> orders;
• This code defines a one-to-many relationship between a Customer entity and an Order entity and specifies that the detach operation should be cascaded to the associated orders. This means that when a Customer entity is detached, any associated Order entities will also be detached automatically. The Order entities will become detached from the persistence context and their state will no longer be managed by Hibernate.
7. CascadeType.REPLICATE
• CascadeType.REPLICATE is a cascading type in Hibernate that specifies that the replicate operation should be cascad


10. What is Hibernate and why is it used?
Hibernate is an open-source object-relational mapping (ORM) framework for Java. It provides a convenient and efficient way to interact with relational databases using object-oriented concepts. Hibernate simplifies the process of mapping Java objects to database tables and performing database operations without writing complex SQL queries.
The primary purpose of Hibernate is to bridge the gap between the object-oriented programming paradigm and the relational database world. It eliminates the need for writing repetitive and error-prone JDBC code by handling the underlying database operations transparently.


11. Explain the differences between Hibernate and JDBC.

12. What are the core interfaces/classes in Hibernate?
13. Session
14. Session factiry
15. Query
16. Criteria
17. Transaction
18. Entuy

19. Describe the Hibernate Session and SessionFactory.

20. What is the purpose of Hibernate mapping files (XML or annotations)?

21. Explain the different types of associations in Hibernate
22. .
23. What is lazy loading in Hibernate?

24. What is the difference between transient, persistent, and detached objects in Hibernate?

25. Explain the Hibernate caching mechanisms and their types.

26. What is the purpose of the Hibernate Query Language (HQL)?

27. How do you perform eager loading in Hibernate?

28. Describe the different fetching strategies in Hibernate.

29. Explain the concept of cascading in Hibernate and its types.
30. How do you handle transactions in Hibernate?
31. What is the difference between save and persist methods in Hibernate?
32. How can you handle concurrency control in Hibernate?

33. What is the purpose of the Hibernate second-level cache?
34. Explain the difference between merge and update methods in Hibernate.
35. How do you optimize Hibernate performance?

36. What are the best practices for using Hibernate in a multi-threaded environment?

