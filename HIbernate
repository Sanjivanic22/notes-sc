O-R mapping
==============
it is all about mapping or linking classes with db tables
the process of mapping java claasess with db tables ,member variable of java java classes with column of db table.
and representing the recordes of db tables with the object of java classes having synchronization b/w them is called O-R mapping.

Hibernate
==============
is a open source,lightweight,portable and noninvasive and integrated java based orm framework or tool that is given given based i
JPA specification rules and guidelines to develope object based o-r mapping perstence logics

hibernate configuration file
--------------------------------------
This file contains info abpout ,how hibernate f/w should locate and establish the connection with DB s/w i.e we specify jdbc driverr details
(jdbc username,password,jdbc rules jdbcdriver classname )
this file is used to given common instruction to hibernate f/w like enabling autocommit,eabling caches,enabling sql queries show and etc

hibernate mapping file
===============================
Thos file contains diff o-r mapping cfgs like mapping entity classes with DB tables and mapping properties of
entity classes with columns of DB tables

featurs of HIbernate framework
========================================
Allow to develop object based DB s/w independant o-r mapping persistence logic without any sql queries
avoid jdbc boilerplate code
support both xml and annotation driven cfgs
the entity classes of hibernate are non-invasive i.e they can moved and used in other frameworks.
All exception in hiberante are unchecked ,so no need of catching and handling method
Support versoning and timestamping
Support both single row and bulk row operations.
Auto schema generation.


4) What are the core interfaces of Hibernate?
The core interfaces of Hibernate framework are:
onfiguration object
-------------------------
by creating bject of this class we can activate hibernate f/w by collecting hibernate jars/libraries from the classpath or
buld path.using this object we can create HB session factory object.
configuration config=new configuration ();
	• Configuration
	• Configuration is a class which is present in org.hibernate.cfg package. It activates Hibernate framework. It reads both configuration file and mapping files.
	
	It activate Hibernate Framework
Configuration cfg=new Configuration();
It read both cfg file and mapping files
cfg.configure();
	• It checks whether the config file is syntactically correct or not.
	• If the config file is not valid then it will throw an exception. If it is valid then it creates a meta-data in memory and returns the meta-data to object to represent the config file.
	
	SessionFactory:
====================
	• SessionFactory is an Interface which is present in org.hibernate package and it is used to create Session Object.
	• It is immutable and thread-safe in nature.
	buildSessionFactory() method gathers the meta-data which is in the cfg Object. 
From cfg object it takes the JDBC information and create a JDBC Connection.
SessionFactory factory=cfg.buildSessionFactory();

this object designed based on th factory design pattern abstraction towords session object creation.
it is heavy weight object bec it contains multiple small object representing diff comp and services.
session factory object is thread safe.

Session object
===================
it is con++ object i.e it contains jdbc con object that is collected jdbc con pool represeted by session factory object and lots o-r mapping metadata
info.create dthrough session factory object
it is base object for programmer to give persstence instruction to hibernate f/w using etity class objects.

	• it is base object for programmer to give persstence instruction to hibernate f/w using etity class objects.
	
	• Session is an interface which is present in org.hibernate package. Session object is created based upon SessionFactory object i.e. factory.
	• It opens the Connection/Session with Database software through Hibernate Framework.
	• It is a light-weight object and it is not thread-safe.
	• Session object is used to perform CRUD operations.
	Session session=factory.buildSession();
	
	Query
==============
	• Query is an interface that present inside org.hibernate package.
	• A Query instance is obtained by calling Session.createQuery().
	• This interface exposes some extra functionality beyond that provided by Session.iterate() and Session.find():
	1. A particular page of the result set may be selected by calling setMaxResults(), setFirstResult().
	2. Named query parameters may be used.
	
	
	• Criteria
======================
	• Criteria is a simplified API for retrieving entities by composing Criterion objects.
	• The Session is a factory for Criteria. Criterion instances are usually obtained via the factory methods on Restrictions.
	
	Transaction
=====================

• Transaction object is used whenever we perform any operation and based upon that operation there is some change in database.
• Transaction object is used to give the instruction to the database to make the changes that happen because of operation as a permanent by using commit() method.
Transaction tx=session.beginTransaction();
tx.commit();

Dialects
================
it is comp of hiberante f/w that is capable of genertaing both pregenerted /static and dynamic sql queries.
Dialect are useful to generate optimized sql queries as required for the underlaying DB s/w
used to assign sesnible,intelligent default values to the configuration properties which are not specifies in hibertanet
cfg file.
EX. <property name="dialect">org.hibernate.dialect.Oracle9Dialect</property>  

HibernateUtil class
=====================
Utility classes are helper classes that required in multiple parts of project representing boilerplate code
Generators in HB
increment
if DB is empty then it generate 1 as the identity value
Bulk operation in HB
to select or manipulate 1 or more records/object having our choice criteria values we need to go for Bulk oprtaion concept
a)Hql/jpql
it is object based query language.these query will be written by using entity class names and their property names
HB dialect internally convert HQL queries into DB specific sql queries
b)Native sql query
c)criteria API or QBC

Cascadig in hibernate
=================================
Cascading is a feature in Hibernate, which is an object-relational mapping (ORM) tool used in Java to map Java classes to database tables. Cascading refers to the ability to automatically propagate the state of an entity (i.e., an instance of a mapped class) across associations between entities. For example, if you have a Customer entity that has a one-to-many relationship with an Order entity, you can define cascading to specify that when a customer is deleted, all of their orders should be deleted as well.
Cascading in Hibernate refers to the automatic persistence of related entities. When a change is made to an entity, such as an update or deletion, the changes can be cascaded to related entities as well. Cascading can be configured using annotations, such as @OneToMany(cascade = CascadeType.ALL), or through XML configuration files. It is important to use cascading carefully, as it can lead to unwanted changes being made to related entities if not configured properly.

Lazy loading and egger loading
---------------------------------
In Hibernate, lazy loading and eager loading are two strategies used to control how related entities are fetched from the database.
These strategies help in managing performance and memory usage by controlling when and how related data is loaded.

Lazy Loading
=============
Lazy loading is a design pattern commonly used in programming to defer the initialization of an object until it is actually needed. This can improve the efficiency and performance of a program by avoiding the loading of unnecessary data, 
especially when dealing with resource-intensive operations or large datasets.
Lazy loading is a strategy where related entities or collections are loaded only when they are accessed for the first time.
This can help reduce the initial load time and memory consumption, as only the required data is fetched from the database.

Key Points:

On-Demand Loading: Data is fetched when it is accessed.
Default Behavior: Collections and associations are typically lazy-loaded by default in Hibernate.
Proxy Objects: Hibernate uses proxy objects to support lazy loading. When an association is marked as lazy, Hibernate creates a proxy for the related entity, which is only initialized when accessed.
Performance: Can improve performance by reducing the number of queries executed at initial load time.

Eager Loading
==================
Eager loading is a design pattern used to fetch related data from the database immediately when the primary data is fetched. 
Unlike lazy loading, where data is fetched on demand, eager loading loads all necessary data upfront, reducing the number of database queries at the cost of potentially loading more data than needed.
Eager loading is a strategy where related entities or collections are loaded immediately along with their parent entity. This means all the necessary data is fetched in a single query, which can reduce the number of database queries at the cost of potentially loading more data than necessary.

Key Points:

Immediate Loading: Data is fetched immediately along with the parent entity.
FetchType.EAGER: Associations are marked with FetchType.EAGER to be eagerly loaded.
Performance: Can lead to performance issues if too much unnecessary data is loaded, especially in scenarios with complex relationships or large datasets.

Session.Save and session.persist
=====================================

Save 
-------
Can generate the generated id value as seriazable wrapper object
Return type is seriazable
Can work with generator to gennerate the value to id/identity property dynamically
It is direct method of hB f/w
Cannot give guarantee for this method availability in all ORM f/w
Signature:
Public seriazable save(Object obj)

Persist
----------
Cannot return id value
Return type is void
Cannot work with generator
It is gathered an implemented by collecting from jpa specification
Available in multiple ORM f/w
Signatue :
Public void persist(Object obj)

SES.GET()&SES.LOAD()
-================================
Ses.get()
	• Prform eager loading of object 
	• Cannot generate proxy class
	• Returns null ,if the record not availabe to load
	• Suitable to verify whether record is availbe or not
	• Hits the DB s/w the moment get() method is called
	• Creates only one objct for entity class
	• No way related  to lazy attribute of <class>tag
	• No way related to proxy attribute
	
Ses.load()
	• Prform lazy loading of object by default can also perform eagger loading
	• Can generate the proxy class
	• Throws ObjectNotFoundException indirectly
	• Not suitable
	• First return the proxy object and hits the DB s/w  only when non-identifier method are called on proxy object.
	• Creaes two object 1 proxy and 1 entity obj
	• Lazy="true"(default) perform lazy loading
	• Lazy=false   perform eager loading
	• If we specify proxy interface name in the proxy attricbute the proxy class will be generated based on proxy interface,this allows to take our entity class as final class
	
	• Prefer using ses.load() in layered apps.  The records asked in DAO class is actualy will be displayed either in the client app/int the view comp(jsp),so DAO gives proxy project to client app/view component by calling ses.load() and the real hit to DB s/w takes place when non-identifier ethods are called on proxy object from client app/biew comp.  
Hibernate Cache
=================
Hibernate caching improves the performance of the application by pooling the object in the cache. It is useful when we have to fetch the same data multiple times.

There are mainly two types of caching:

First Level Cache, and
Second Level Cache

diff b/w first level cache and second level cache

First-Level Cache (Session Cache)
======================================
Scope: The first-level cache is associated with the Hibernate Session object. Each Session object has its own first-level cache, and it is not shared between Session instances.
Default: It is enabled by default and cannot be disabled.
Lifecycle: The first-level cache exists as long as the session is open. Once the session is closed, the cache is destroyed.
Granularity: It caches objects based on their identifiers (primary keys).
Usage: It ensures that within a single session, the same object is not loaded multiple times. It helps in reducing the number of SQL queries sent to the database by storing already fetched objects.
Implementation: This cache is implemented by Hibernate and does not require any special configuration.


Second-Level Cache (SessionFactory Cache)
============================================
Scope: The second-level cache is associated with the SessionFactory object. It is shared among multiple sessions.
Default: It is not enabled by default and needs to be configured explicitly.
Lifecycle: The second-level cache exists as long as the SessionFactory is open. It can be used across multiple sessions.
Granularity: It can cache entities, collections, and query results.
Usage: It helps in reducing the number of SQL queries sent to the database across multiple sessions by storing data that is frequently accessed. This can significantly improve the performance of the application.
Implementation: It requires a caching provider (e.g., Ehcache, Infinispan, Hazelcast) and additional configuration in the Hibernate settings.


Key Differences
====================
Feature	First-Level Cache	                Second-Level Cache
Scope	Single Session	                         Multiple Sessions
Default Behav Enabled by default	          Not enabled by default
ConfigurationNo special configuration needed	 Requires explicit configuration and a cache provider
Lifecycle Lives within the session	    Lives within the SessionFactory
Granularit Entities by identifier (primary key)	Entities, collections, and query results
Usage	Ensures the same object is not loaded multiple times within a session	Reduces database access across sessions
Performance	Improves performance within a session	Improves performance across multiple sessions

Association mapping
==============================
if we keep db tables in relationship with their relevent entity classes should kept relationship by mapping them through association mapping
one to many unidirectional association mapping
since we want to impletement one to may unidirectional association having parent to child navigation.so parent entity class should
have special collection type property to hold multiple object of child class.
Types of Associations
One-to-One (1:1)
One-to-Many (1)
Many-to-One (N:1)
Many-to-Many (N)

JPA
----=
JPA is s/w specification that provides bunch of rules and guidelines t develop ORM s/w or tools

@Entity-to mark given java class as model class
@table-to map entity class with DB table
@Id-to mark entity class peprperty as id property
@column-to map each property with DB table column
@Type-to specify hibernate data type
@Transient-to make certain property not participating persistence operations
@DynamicInsert/update makes hibernate dialect to generate sql query dynamically only by involving those
properties whose values are not null

