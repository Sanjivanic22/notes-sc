## Spring 
-=================
Spring is opensource lightweight framework 
Which is used to develop any kind of application
It is like framework of framework because it support vrious framework like struts and hibernate.
Spring framework comprise several modules such as IOC,AOP,springn core,spring mvc

Advantages
==========
Spring framework provides predefined libraries and templates
Spring framework privide loos coupling
Manages the dependancies injection and IOC automatically
Spring framwork very easy to  testing
Spring web framework is well design mvc framework which provide the greate alteranative to another ````framework like struts.

Spring container
===================
Spring container is at the core of the spring framework.
The container will creates the object,wire them together,configure them and manage their complete life cycle from creation till destruction.
the spring container uses DI to manage the componenets that make up an application.


IOC container and types
=========================
IOC container
======================
The IOC container is INVERSION of control which is responsible to instantiate, configure and assemble the objects. 
The IoC container gets informations from the XML file and works accordingly. 
The main tasks performed by IoC container are:
=>to instantiate the application class
=>to configure the object
=>to assemble the dependencies between the objects

There are two types of IoC containers. They are:
==================================================
1)BeanFactory
2)ApplicationContext

In the spring both BeanFactory and ApplicationContext are interfaces used for managing beans. 

Difference between BeanFactory and the ApplicationContext
==================================================================

Using BeanFactory
=====================

Xml beanfactory is implementation class to use the bean factory for that we need to create the instance of xmlbeanfactory.
 To use the BeanFactory, we need to create the instance of XmlBeanFactory class as given below:

Resource resource=new ClassPathResource("applicationContext.xml");  
BeanFactory factory=new XmlBeanFactory(resource); 
 
The constructor of XmlBeanFactory class receives the Resource object so we need to pass the resource object to create the object of BeanFactory.


Using ApplicationContext
=============================
the ApplicationContext interface is built on top of the BeanFactory interface. 
It adds some extra functionality than BeanFactory such as simple integration with Spring's AOP, message resource handling (for I18N), event propagation, application layer specific context (e.g. WebApplicationContext) for web application.
 So it is better to use ApplicationContext than BeanFactory.
The ClassPathXmlApplicationContext class is the implementation class of ApplicationContext interface.
 
We need to instantiate the ClassPathXmlApplicationContext class to use the ApplicationContext as given below:

ApplicationContext context =   
    new ClassPathXmlApplicationContext("applicationContext.xml"); 

The constructor of ClassPathXmlApplicationContext class receives string, so we can pass the name of the xml file to create the instance of ApplicationContext.

spring bean life cycle
==========================
spring bean life will start from the bean creation and end with bean destruction
init and destry methods are impiratant in spring bean life cycle which can configure in xml file with init-initailization and 
init-destruction .or programatically we can do with @ initailization and @disposable method

Spring bean life cycle is maintained by IOC Container

1. Container gets started.

2. Container creates the object of bean as per request.

3. Dependencies is created

4. Dependencies is injected

5. Destroyed when containerÂ closed.
Dependancy lookup
==================
in Dependancy lookup we will  get the resource after demand.

i) dependency lookup makes the code tightly coupled. If resource is changed, we need to perform a lot of modification in the code.
ii)Not easy for testing This approach creates a lot of problems while testing the application especially in black box testing.

Dependancy injection
======================
Depenancy injection is design pattern thet removes the dependancies  from the programming code so that it can be easy to test and manage the application.
Dependancy injection makes our code loosely coupled.

Constructor injection
=======================
Here Our Ioc container uses parameterised constructor to create the target bean class object.
In that process we inject the dependant class object to target class object.

The <constructor-args> tag is used for constructor injection.
Here we inject the 
Primitive and string based value
Dependant object
Collection values
If all properties of spring bean class are mandatory to participate in the injection then we 
Should go for constructor injection.

Settter injection
===========================
Here IOC container calls the setter of target class to assign dependant class object to target class object.
<property>tag used for setter injection
We can inject the 
Primitive an string -based values
Dependant object
Collection values

If we want to involve only our choice of propetries into the spring class the we should go for setter injection.


Spring bean scope
===================
In Spring, "scope" refers to the lifecycle of a bean, defining how long a bean instance should live and how it should be created and shared within 
the application context.
Spring provides several scopes to manage the lifecycle and visibility of beans. Here are the common bean scopes available in Spring:

Singletone
===========
If scope is set to singletone scope ,the spring IOC container creates exactly one instance of the object defined by that bean defination.
It is default scope if no scope is specified
IOC container creates only one oject for spring bean class nad reuses that object.

Prototype
=============
If scope is set to prototype ,the spring IOC container creates a new instance of the object.
 every time a resquest for that specific bean is mode as rule 
use the prototype scope for all state-full beans and singletom scope for stateless beans.
To define prototype ,you can set the  scope property to prototype in the bean configuration file.

Scope=Request (for http protocol)
================================
bean instance will created per http request
Scope="session"
Ioc container keeps spring bean class object as session attribute of web app env.
bean instance will be created per http session

Global session

Autowring
=============
Autowiring enable you to inject the object depndancy .it internally uses setter or constructor injection.
Autowiring work with object dependancy.

In object dependancy we need to call referance of another class from dependancy class manualy
But if we use the wiring concept then we need not to call the refernace maually from the dependant class.
Modes of autowiring
No
Default autowiring mode,its mean no autowiring by default.

Byname
--------
Inject the onject dependancy.according to proptery name and bean name.
In this case proptery name bean name must be same internally call setter method .

Bytype
---------
Inject the object dependancy according to type property name and bean name can be different.
Internally call setter method.

Constructor
------------
Inject by calling constructor of class calls constructor having the large no of parameter.
Autodected-deprecated.

Spring Transaction in spring
=============================
In spring transaction can be handle in two ways.
i.e Programatically and declaratively
1) in programatic we have to write series of code  to commit your transaction and rollback transaction.
that means we need to write for commit or rollback transaction
there is one more way that is declarative way where we write template in xml
whenever the is runtime exception the spring will automatically rollback the transaction and if there no exception then spring will commit the transaction.
Spring ORM
============
It is spring module providing abstraction on multiple ORM framework like hiberanate like 
O-r mapping 
The process of Linking Db tables with java classes and Db table cols with the properties of classes and having  Synchronization b/w them is called o-r mapping.

Spring ORM
It is a spring module providing abstraction on multiple ORM frameworks like hiberante,iBatis and etc to simplify Object based O-R mapping persistance logic.

It supplies mutiple templates classes like hibernate template 

How can we disable configuration in spring?
============================================
To disable auto-configuration for a specific class or feature in a Spring Boot application, you can use the @EnableAutoConfiguration annotation 
along with the exclude attribute. This allows you to exclude specific auto- configuration classes from being applied.

@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class, MultipartAutoConfiguration.class}}

public class YourApplication {

public static void main(String[] args) {

SpringApplication.run(YourApplication.class, args);

}

2) also using the spring.autoconfigure.exclude property in the application properties or YML file.

Spring MVC
=============
## SPRING MVC FLOW
 -------------------------------
 Client Sends a Request:
==============================
The client (typically a web browser) sends an HTTP request to the server for a specific URL or endpoint.
DispatcherServlet Receives the Request:
=====================================
The request is intercepted by the front controller of Spring MVC, known as the DispatcherServlet. It acts as the central entry point for all requests.
Handler Mapping:
========================
The DispatcherServlet consults the configured HandlerMapping to determine which controller (handler) should process the request based on the request URL or other criteria.
The HandlerMapping maps the request to the appropriate controller method based on the configured URL patterns or mappings.
Controller Method Execution:
=============================
The controller method performs the required business logic, data processing, or interacts with other components or services as needed.
The method may also prepare a model object that holds the data to be rendered by the view.
Model and View Resolution:
===========================
After the controller method has processed the request, it returns a logical view name and model data.
.The ViewResolver resolves the logical view name to an actual view, which can be a JSP, Thymeleaf template, JSON, XML, etc.
Rendering the View:
=======================
The resolved view is responsible for rendering the model data into the final response format.like HTML, JSON, XML, etc.
Sending the Response;
======================
The DispatcherServlet sends the final response back to the client, which contains the rendered view or response data.

>>> Springdata JPA
==================
Spring Data JPA is a part of the larger Spring Data project to simplify data access and make it easier to work with data in Spring-based applications. 
Spring Data JPA specifically focuses on providing a consistent and convenient way to interact with databases using Java Persistence API (JPA). 
It abstracts the boilerplate code required for data access and offers a higher-level, object-oriented approach to database interactions.

Key Features of Spring Data JPA
Repository Abstraction:

Provides a set of interfaces for data access operations, such as CrudRepository, PagingAndSortingRepository, and JpaRepository.
These interfaces offer methods for common CRUD operations, pagination, and sorting out-of-the-box.
Query Methods:

Allows the creation of query methods by simply defining method signatures in repository interfaces.
Methods are automatically implemented based on their names (e.g., findByLastName(String lastName)).
JPQL and Native Queries:

Supports the use of Java Persistence Query Language (JPQL) and native SQL queries.
Queries can be defined in repository interfaces using the @Query annotation.

Custom Repository Implementation:

Allows adding custom behavior to repositories by providing a base implementation class.
Custom implementations can be mixed with Spring Data's default implementations.

Auditing:

Provides support for auditing entity changes, such as created and modified dates.
Easily enabled with annotations like @CreatedDate and @LastModifiedDate.

Specification API:

Allows the creation of dynamic queries using the Criteria API and the Specification interface.
Useful for building complex queries programmatically.
Transactional Support:

CrudRepository
CrudRepository provides basic CRUD (Create, Read, Update, Delete) functionality. It is the simplest interface and is the foundation for the other repositories.

Key Methods
save(S entity): Saves a given entity.
findById(ID id): Retrieves an entity by its ID.
existsById(ID id): Checks if an entity with the given ID exists.
findAll(): Retrieves all entities.
findAllById(Iterable<ID> ids): Retrieves all entities by their IDs.
count(): Returns the count of entities.
deleteById(ID id): Deletes an entity by its ID.
delete(T entity): Deletes a given entity.

PagingAndSortingRepository
PagingAndSortingRepository extends CrudRepository and adds methods to handle pagination and sorting. This interface is useful when you need to retrieve subsets of data and sort them.

Key Methods
In addition to the methods provided by CrudRepository, PagingAndSortingRepository includes:

Iterable<T> findAll(Sort sort): Retrieves all entities sorted by the given options.
Page<T> findAll(Pageable pageable): Retrieves a page of entities according to the given Pageable object.


JpaRepository
JpaRepository extends PagingAndSortingRepository and adds JPA-specific methods. This interface provides additional methods
for JPA-related operations such as flushing the persistence context and batch deletes.

Key Methods
In addition to the methods provided by CrudRepository and PagingAndSortingRepository, JpaRepository includes:

void deleteInBatch(Iterable<T> entities): Deletes the given entities in a batch.
void deleteAllInBatch(): Deletes all entities in a batch.
T getOne(ID id): Retrieves an entity reference by its ID.
void flush(): Flushes all pending changes to the database.
List<T> findAll(): Retrieves all entities.


Spring AOP
==============
AOP is methodology of programming  to solve the problems related OOP style programming,but it is bult on the top of of oops style programming.In AOP code is not clumzy,becoz the primary and secondary logics are saperated
Improves the redability  and modularity of the code.

the key differences between SOAP and REST:
=================================================================================

| Aspect                   | SOAP (Simple Object Access Protocol)              | REST (Representational State Transfer)             |
|--------------------------|---------------------------------------------------|---------------------------------------------------|
| **Protocol/Architecture**| Protocol                                          | Architectural Style                               |
| **Communication Style**  | XML-based messaging                               | Standard HTTP methods (GET, POST, PUT, DELETE)    |
| **Transport**            | Primarily HTTP, also supports SMTP, TCP, etc.     | Primarily HTTP/HTTPS                              |
| **Message Format**       | Strictly XML with envelope, header, and body      | Flexible formats: JSON, XML, HTML, plain text     |
| **Statefulness**         | Generally stateful                                | Stateless                                         |
| **Resource Focus**       | Focus on actions and operations                   | Focus on resources (identified by URIs)           |
| **Contract**             | Strongly typed, formal contract via WSDL          | No formal contract, URI endpoints and HTTP methods|
| **Security**             | Built-in WS-Security for end-to-end security      | Relies on HTTPS, OAuth, JWT for security          |
| **Performance**          | Heavier due to XML and additional overhead        | Lighter, generally faster due to JSON             |
| **Scalability**          | Complex to scale due to overhead                  | Easier to scale horizontally due to statelessness |
| **Error Handling**       | Standardized fault elements in message body       | HTTP status codes (e.g., 200, 404, 500)           |
| **Use Cases**            | Enterprise applications, complex transactions     | Web/mobile applications, microservices            |
| **Examples**             | Banking services, payment gateways                | Social media platforms, e-commerce websites       |

















