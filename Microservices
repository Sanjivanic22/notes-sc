R u having hands on exprience in microservice
-----------------------------------------------
yes i am having hands on experience we have migrated the monolithic architecture to microservices architecture

## what is microservice architecture
-----------------------------------------
Microservice is an architectural style for designing and building software applications as a collection of small, independent, and 
loosely coupled servicesthat communicate with other over well defined API'S.  In this approach, an application is divided into a set of services, 
each representing a specific business capability and running as a separate process or container.

## what is diferance b/w Microservice and Monolithic architecture.
--------------------------------------------------------------------
Microservices                                                             
1)are small and focused on bussiness capabilities.
2)Microservices can developed,deployed and scaled independatly.allowing  for agility and flexibility.
3)microservices are allow to use of diffenert tecnology,programming language for each service depending on the specific requirement

 Monolithic
--------------
1)Monolthic are larger and contains all functionality in signle unit
2)monolithic requirs the entire application to be delpoyed and scale.d as whole
3) entire application is developed in single technology stack.

Advatanges 
---------------
1)Scalability
2)felexibility and agility
3)modularity and maintanability
4) microservices architecture allow you to use diffrenet tecnnologies ,programming language and framework based on there requirement.
5) with the microservces if one service fails or experiences issue.it doesnt affect the entire system.
service can be designed to handle failure gracefully. and implement resillience .such as circuit breaker or retry mechnism.
6) ensure scalability and performance
microservice can optimize resource allocation by allowing each service to scale indepently based on the requirement.

What is Api gateways?
-----------------------
In microservice architerure an ApI gateway is server side componenet that acts as an entry point or facade for client application to access the 
underlaying microservices.
it provides centralized point,encapsulating the complexity of the ms ecosystem and offering a unified interface to the client.
API gateway handle incoming client request and route them to the appropriate MS based the requested API endpoint.
it can handle the authentication and authorzation validate caces token.

we use AWS API Gateway, a fully managed service provided by Amazon Web Services that makes it easy to create, publish, maintain, monitor, and secure APIs 
at any scale.'"

What is cicuit braking and wh to y it is so important?
-------------------------------------------------------------
circuit breaking is mechanism use in microservice to improve the resillience and functinonality of the system.
it helps to prevent failure in once service from cascading and affecting the overall system to improve the system resilience
it enables services and client application to handle n/w and service disruption more effectively leading to more robust and reliable MS.

WHat is Eureka server?
=-----------------------
Eureka server is compoent of netflix,service discovery and resistration tool for building microservice based application.
eureka server acts as centralized registry where MS can register themselves and discover service within the system.
eureka servver server provides diffenet kind of functionality.
service registration
service discovery
load balancing
failover and fault tolarance

what is service descovery?
-----------------------------
in microservices Service discovery  enables the automatic detection of services within a microservice architecture. 
This process allows services to find and communicate with each other without hard-coding their network locations. 
Service discovery addresses the dynamic nature of microservices, where instances of services can scale up or down, move across different hosts, 
or restart at different network addresses.

Service Registry:
A central repository that maintains the list of service instances and their network locations (IP addresses and ports).
The service registry is updated dynamically as services start and stop.

What is load balanncer
----------------------------
A load balancer  is a component that distributes incoming network traffic across multiple service instances to ensure no single instance becomes a bottleneck. 
Load balancing enhances the reliability, availability, and scalability of microservices by managing the distribution of workloads and ensuring optimal 
resource utilization.

Containeratin?
--------------
container pkges the microservices with its dependancies making it easier to deploy and manage across diff env.

Restetemplate
=================
RestTemplate is a synchronous client provided by Spring Framework to perform HTTP requests and handle responses.
It's widely used in Spring-based applications to interact with RESTful web services.

previously we are having resttemplate for communication but now we are having 
as of 6.1 resteclient offers modern API for sychronuous http access,for asynchronuous and streaming scenarios, consider reactive webclient

spring cloud openfien client -can communicate with APIs(we need to add dependancies of open fien)


 Sysnchrous &Asychronous
============================
Synchronous Processing: 
Suitable for tasks where operations are dependent on the results of previous operations and blocking is acceptable.

Example: Simple script execution, basic function calls.

Asynchronous Processing:
Ideal for tasks that can be performed independently and where non-blocking execution improves efficiency and responsiveness.

Example: Network requests, I/O operations, real-time applications.

how microservices communicate with each other -byusing service descovery services communicate with each other.

hystrix
===========
It helps to control the interactions between distributed services by adding fault tolerance logic, thereby ensuring that failures in one service
do not cascade and cause system-wide outages.
Hystrix helps in preventing cascading failures in a microservice architecture. 
If one service fails, it ensures that the failure does not propagate to other services by isolating the faulty service.

how can we achive loose coupling b/w two services.
-----------------------------------------------------
Loose coupling between two services in a microservices architecture can be achieved using various strategies and patterns. 
1. Use APIs and Contracts
APIs (Application Programming Interfaces) define clear and well-documented contracts between services. 
By interacting through APIs, services remain independent of each other's internal implementations.

2. API Gateway
An API Gateway acts as an intermediary between clients and microservices. 
It helps in abstracting the underlying services, allowing them to evolve independently without impacting the clients.

3. Service Registry and Discovery
Using a service registry (e.g., Eureka, Consul), services can register themselves and discover other services dynamically. 
This removes the need for hard-coded service addresses.

4. Message-Driven Communication
Using message brokers (e.g., RabbitMQ, Kafka) allows services to communicate asynchronously by exchanging messages through queues or topics. 
This decouples the services as they don't need to be aware of each other's existence.

5. Asynchronous Processing
Using asynchronous processing helps to decouple services by allowing them to handle requests and responses independently


