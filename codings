coding Questions list
## String programs
========================
1) Reverse String
------------------
public class ReversedString {

public static void main(String[] args) {

String str="Sanjivani",nstr="";
char ch;
System.out.println("original word:"+str);
for(int i =0;i<str.length();i++) {

	ch =str.charAt(i);

	nstr=ch+nstr;

}

System.out.println("Reversed word:"+nstr);

}


2)How to iterrate map using  java 8
import java.util.HashMap;
import java.util.Map;

public class IterateMap {
    public static void main(String[] args) {
        Map<String, Integer> map = new HashMap<>();
        map.put("One", 1);
        map.put("Two", 2);
        map.put("Three", 3);

        map.forEach((key, value) -> {
            System.out.println("Key: " + key + ", Value: " + value);
        });
    }
}

using entry set
=====================
import java.util.HashMap;
import java.util.Map;

public class IterateMap {
    public static void main(String[] args) {
        Map<String, Integer> map = new HashMap<>();
        map.put("One", 1);
        map.put("Two", 2);
        map.put("Three", 3);

        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
        }
    }
}

3)How to remove remove duplicate from arraylist
public class RemoveDuplicates {
    public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        list.add("One");
        list.add("Two");
        list.add("Three");
        list.add("One");
        list.add("Two");

        System.out.println("Original List: " + list);

        Set<String> set = new HashSet<>(list); // Convert to set to remove duplicates
        List<String> uniqueList = new ArrayList<>(set); // Convert back to list

        System.out.println("List after removing duplicates: " + uniqueList);
    }
}
using java 8
List<Integer>uniquelist=list.stream()
				.distinct()
				.collect(Collectors.toList());
		System.out.println("after removing duplicates"+uniquelist);
	


4)How to remove duplicate from linkedlist
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;

public class RemoveDuplicatesFromLinkedList {
    public static void main(String[] args) {
        LinkedList<String> linkedList = new LinkedList<>();
        linkedList.add("One");
        linkedList.add("Two");
        linkedList.add("Three");
        linkedList.add("One");
        linkedList.add("Two");

        System.out.println("Original LinkedList: " + linkedList);

        Set<String> set = new LinkedHashSet<>(linkedList); // Use LinkedHashSet to maintain order
        linkedList.clear(); // Clear the original list
        linkedList.addAll(set); // Add unique elements back to the list

        System.out.println("LinkedList after removing duplicates: " + linkedList);
    }
}
using java8
List<String>uniquelist=list.stream()
			.distinct()
			.collect(Collectors.toList());
	System.out.println("Liinkedlist after removing duplicates"+uniquelist);
5)Singletone class
ackage com.nt.test;

public class Printer {
//private static member variable
private static Printer INSTANCE;
//private constructor
private Printer() {
System.out.println("Printer::0-param constructor");	
}
//factory method
public static Printer getInstance() {
	if(INSTANCE==null)
		INSTANCE=new Printer();
	return INSTANCE;
}
//b.method
public void printData(String msg) {
	System.out.println(msg);
}

}

package com.nt.test;

public class Test {

	public static void main(String[] args) {
		Printer p1=null,p2=null;
	
		 p1=Printer.getInstance();
		 p2=Printer.getInstance();
		 System.out.println(p1.hashCode()+" "+p2.hashCode());
	System.out.println("(p1==p2?)"+(p1==p2));
	p1.printData("hello1");
	p1.printData("hello2");
	}

}

6)Immutable class
public final class ImmutablePerson {
    private final String name;
    private final int age;
    private final List<String> hobbies;

    // Constructor to initialize fields
    public ImmutablePerson(String name, int age, List<String> hobbies) {
        this.name = name;
        this.age = age;
        this.hobbies = Collections.unmodifiableList(hobbies);
    }

    // Getter methods for fields
    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public List<String> getHobbies() {
        return hobbies;
    }

    // No setters are provided

    @Override
    public String toString() {
        return "ImmutablePerson{" +
                "name='" + name + '\'' +
                ", age=" + age +
                ", hobbies=" + hobbies +
                '}';
    }
}

public class ImmutableClassExample {
    public static void main(String[] args) {
        List<String> hobbies = new ArrayList<>();
        hobbies.add("Reading");
        hobbies.add("Swimming");

        ImmutablePerson person = new ImmutablePerson("John", 30, hobbies);

        System.out.println("Person: " + person);

        // Attempting to modify the original hobbies list
        hobbies.add("Cycling");
        System.out.println("Person after modifying hobbies list: " + person);

        // Attempting to modify the returned hobbies list
        try {
            person.getHobbies().add("Cycling");
        } catch (UnsupportedOperationException e) {
            System.out.println("Cannot modify hobbies list: " + e.getMessage());
        }

        System.out.println("Person: " + person);
    }
}

Explanation:
final Class: The class is declared as final to prevent subclassing.
Private and Final Fields: All fields are private and final, ensuring they can be assigned only once.
Constructor: The constructor initializes all fields. For the hobbies list, a new ArrayList is created to ensure the original list cannot be modified from outside the class.
No Setter Methods: The class does not have any setter methods, ensuring the fields cannot be modified after object creation.
Getters: The getters for mutable fields return a new copy of the list, preventing external modification of the internal list.

7)concurrentModificatiobRxception
====================================
List <Integer> list=new ArrayList<>();
list.add(1);
list.add(2);
list.add(3);
list.add(4);
try{
Iterator <Integer> iterator=new Iterator<>();
Integer value=iterator.next();
while(iterator.hashNext){
if(value%2==0){
list.remove(list);

}
}
catch(concurrentModificatiobRxception e){
Systrm.out.println("concurrentModificatiobRxception caugght"+e);
Sysout("list after modification attempt "+ list);

}

}
----------------------------------------------------------------------------------------------------------------------------------------------------
1) Reverse String
------------------
public class ReversedString {

public static void main(String[] args) {

String str="Sanjivani",nstr="";
char ch;
System.out.println("original word:"+str);
for(int i =0;i<str.length();i++) {

	ch =str.charAt(i);

	nstr=ch+nstr;

}

System.out.println("Reversed word:"+nstr);

}

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class ComparatorExample {
    public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        list.add("Apple");
        list.add("Banana");
        list.add("Cherry");
        list.add("Date");

        // Sort strings by length using lambda expression
        Comparator<String> lengthComparator = (s1, s2) -> Integer.compare(s1.length(), s2.length());

        Collections.sort(list, lengthComparator);

        System.out.println("Sorted by length: " + list);
    }
}


second highest number in list
package com.nt.main;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class SecondHighestNumber {
public static void main(String[] args) {
	List<Integer>list=Arrays.asList(1,2,4,6,8,6);
	Optional<Integer>secondHighestnumber=list.stream()
			.distinct()
			.sorted((a,b)->b-a)
			.skip(1)
			.findFirst();
	if(secondHighestnumber.isPresent()) {
		System.out.println("The second highest number is"+secondHighestnumber.get());
		
	}else {
		System.out.println("The list dosent have second highest number in list:");
	}
}
}

write pattern 
1111*
111**
11***
1****
*****

public class Ex1 {
public static void main(String[] args) {
	int rows=5;
	for(int i=0;i<rows;i++) {
		//print decreasing numbers
		for(int j=0;j<rows-i-1;j++) {
			System.out.print(1);
		}
		for(int k=0;k<=i;k++) {
			System.out.print("*");
	
			
		}
		System.out.println();
	}
}
}

//Explanation:
//Outer Loop (for (int i = 0; i < rows; i++)): Iterates over each row.
//First Inner Loop (for (int j = 0; j < rows - i - 1; j++)): Prints the decreasing numbers.
//The number printed is calculated as (1)
//Second Inner Loop (for (int k = 0; k <= i; k++)): Prints the increasing stars (*).
//System.out.println();: Moves to the next line after printing the numbers and stars for the current row.


//*
//***
//*****
//*******
//*********
//*******
//*****
//***
//*

public class DiamondPattern {
	
	    public static void main(String[] args) {
	        int n = 5; // number of rows (for half part)
	        for(int i=1;i<=n;i++) {
	        	for(int j=i;j<n;j++) {
	        	System.out.print(" ");	
	        	}
	        	for(int k=1;k<=(2*i-1);k++) {
	        		System.out.print("*");
	        	}
	        	System.out.println("");
	        }
	        
	       //lower half
	        for (int i = n - 1; i >= 1; i--) {
	            for (int j = n; j > i; j--) {
	                System.out.print(" ");
	            }
	            for (int k = 1; k <= (2 * i - 1); k++) {
	                System.out.print("*");
	            }
	            System.out.println();
	        }
	    }
}
//*****
//****
//***
//**
//*

public class InvertedRightAngleTraingl {
public static void main(String[] args) {
	
	        int n = 5; // number of rows
	        
	       for(int i=n;i>=1;i--) {
	    	   for(int j=1;j<=i;j++) {
	    		   System.out.print("#");
	    	   }
	    	   System.out.println("");
	       }
	    }



}
//*
//***
//*****
//*******
//*********


public class PyramidPatterns {
	
	    public static void main(String[] args) {
	        int n=5;
	        for(int i=1;i<=n;i++) {
	        	for(int j=i;j<n;j++) 
	        	{
	        	System.out.print("");	
	        	}
	        	for(int k=1;k<=(2*i-1);k++) {
	        		System.out.print("*");
	        	}
	        	System.out.println("");
	        }
	    }
}



//*
//**
//***
//****
//*****

public class RightAngleTrainglePatterns {
public static void main(String[] args) {
	int n=5;
	for(int i=0;i<=n;i++) {
		for(int j=1;j<=i;j++) {
			System.out.print("*");
		}
		System.out.println("");
	}
 }
}

//*
//* *
//*   *
//*     *
//*********
public class HollowPyramid {
	
	    public static void main(String[] args) {
	        int n = 5; // number of rows
	        
	        for (int i = 1; i <= n; i++) {
	            for (int j = i; j < n; j++) {
	                System.out.print(" ");
	            }
	            for (int k = 1; k <= (2 * i - 1); k++) {
	                if (k == 1 || k == (2 * i - 1) || i == n) {
	                    System.out.print("*");
	                } else {
	                    System.out.print(" ");
	                }
	            }
	            System.out.println();
	        }
	    }
	}

























by using inbuilt function
=================================
public class ReversedString {

public static void main(String[] args) {

//using StringBuilder

	String input="Sanjivani";

	StringBuilder sb=new StringBuilder();

	//append

	sb.append(input);

	//reverse

	sb.reverse();

	System.out.println(sb);

}

}

check if string is palindome
==================================
public class StringPalindrom {

public static void main(String[] args) {

	String str="Kayak";

	str=str.toLowerCase();

	boolean isPalindrom=checkPalindrom(str);

	if(isPalindrom) {

		System.out.println("the string is palindrom");

	}

	else {

		System.out.println("The Sring is not palindrom");

	}

}

public static boolean checkPalindrom(String str) {

	int left=0;

	int right=str.length()-1;

	while(left<right) {

		if(str.charAt(left)!=str.charAt(right)){

			return false;

		}

		left++;

		right--;

	}

	return true;

}

}

Count the frequency of character
=========================================
public class FrequencyCharacter {
	 public static void main(String[] args) {
	        String str ="Sanjivani";
	        Map<Character, Integer> frequencyMap = countCharacterFrequency(str);

	        System.out.println("Character Frequency:");
	        for (Map.Entry<Character, Integer> entry : frequencyMap.entrySet()) {
	            System.out.println(entry.getKey() + ": " + entry.getValue());
	        }
	 }
	    public static Map<Character, Integer> countCharacterFrequency(String str) {
	        Map<Character, Integer> frequencyMap = new HashMap<>();

	        for (char c : str.toCharArray()) {
	            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
	        }

	        return frequencyMap;
	    }

	   
	   
}

REmove Repeated word using hashmap
=============================================

public class RemoveRepeatedWordFromStringusingHashMap {

public static void main(String[] args) {

String str="how are you how do you do";	

String result=removeRepatedWord(str);

System.out.println(result);

}

public static String removeRepatedWord(String str) {

	String[] words=str.split("");

	HashMap<String,Integer> uniqueFrequencyMap=new HashMap<String, Integer>();

	for(String word:words) {

		uniqueFrequencyMap.put(word,uniqueFrequencyMap.getOrDefault(word, 0)+1);

	}

	StringBuilder sb=new StringBuilder();

	for(String word:words) {

		if(uniqueFrequencyMap.get(word)==1) {

		sb.append(word).append("");	

		}

	}

	return sb.toString().trim();

}

}

Remove duplicate String
===========================
public class RemovDuplicateString {

public static void main(String[] args) {

	String [] fruits= {"mango","apple","mango","Grapes","Apple"};

	String[] uniquefruits=removeDuplicates(fruits);

	System.out.println("withoutDuplicates:"+Arrays.toString(uniquefruits));

}

public static String[] removeDuplicates(String[] arr) {
	HashSet<String> uniqueSet=new HashSet<String>();

	String [] result=new String[arr.length];

	int index=0;

	for(String fruits:arr) {

		if(uniqueSet.add(fruits)) {

			result[index]=fruits;

			index++;

		}

	}

	return Arrays.copyOf(result, index);

}

}

Remove duplicate character from string
==========================================
public class RemoveDuplicateCharacter {

	 public static void main(String[] args) {

	        String str = "Hello, World!";

	        String result = removeDuplicateCharacters(str);



	        System.out.println("String after removing duplicates: " + result);

	    }

public static String removeDuplicateCharacters(String str) {

	        Set<Character> uniqueChars = new HashSet<>();

	        StringBuilder result = new StringBuilder();

	        for (char c : str.toCharArray()) {

	            if (!uniqueChars.contains(c)) {

	                uniqueChars.add(c);

	                result.append(c);

	            }

	        }

     return result.toString();

	    }

}

find the length of longest substring without repeating character
=================================================================

package com.nt.main;
import java.util.HashSet;

import java.util.Set;

public class LongestSubstringwithoutDuplicates {

    public static void main(String[] args) {

        String str = "abcabcbb";

        int longestLength = lengthOfLongestSubstring(str);

        System.out.println("Length of the longest substring without repeating characters: " + longestLength);

    }


	  public static int lengthOfLongestSubstring(String str) {

	        int length = str.length();

	        int maxLength = 0;

	        int start = 0;

	        int end = 0;

	        Set<Character> charSet = new HashSet<>();

	        while (end < length) {

	            char c = str.charAt(end);

	            if (!charSet.contains(c)) {

	                charSet.add(c);

	                int currentLength = end - start + 1;

	                maxLength = Math.max(maxLength, currentLength);

	                end++;

	            } else {

	                charSet.remove(str.charAt(start));

	                start++;

	            }

	        }

     return maxLength;

	    }

}

check if a string is a valid paranthesis expression
======================================================
public class ValidParanthesis {

	public static void main(String[] args) {

        String str1 = "()";

        String str2 = "{[()]}";

        String str3 = "{[}]";

        System.out.println(str1 + " is " + (isValidParentheses(str1) ? "valid" : "invalid") + " parentheses expression");

        System.out.println(str2 + " is " + (isValidParentheses(str2) ? "valid" : "invalid") + " parentheses expression");

        System.out.println(str3 + " is " + (isValidParentheses(str3) ? "valid" : "invalid") + " parentheses expression");

    }

	    public static boolean isValidParentheses(String str) {

	        Stack<Character> stack = new Stack<>();

	        for (char c : str.toCharArray()) {

	            if (c == '(' || c == '[' || c == '{') {

	                stack.push(c);

	            } else if (c == ')' || c == ']' || c == '}') {

	                if (stack.isEmpty()) {

	                    return false;

	                }

	                char top = stack.pop();

	                if ((c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{')) {

	                    return false;

	                }

	            }

	        }

	        return stack.isEmpty();

	    }
	    

	}
check if two strings are anagram
=======================================

public class AnagramStringchecker {

	 public static void main(String[] args) {

	        String str1 = "listened";

	        String str2 = "silent";

	        boolean areAnagrams = areAnagrams(str1, str2);

	        System.out.println(str1 + " and " + str2 + " are " + (areAnagrams ? "anagrams" : "not anagrams"));

	    }

	    public static boolean areAnagrams(String str1, String str2) {

	        if (str1.length() != str2.length()) {

	            return false;

	        }

	        char[] charArray1 = str1.toCharArray();

	        char[] charArray2 = str2.toCharArray();

	        Arrays.sort(charArray1);

	        Arrays.sort(charArray2);


	        return Arrays.equals(charArray1, charArray2);

	    }

	}

find nonreapinting character in string
=========================================

public class FirstNonRepeatingCharacter {

	public static void main(String[] args) {

        String str = "abaccdbdef";

        char firstNonRepeatingChar = findFirstNonRepeatingChar(str);


        if (firstNonRepeatingChar != ' ') {

            System.out.println("First non-repeating character: " + firstNonRepeatingChar);

        } else {

            System.out.println("No non-repeating character found in the string.");

        }

	}

	    public static char findFirstNonRepeatingChar(String str) {

	        Map<Character, Integer> charCountMap = new HashMap<>();



	        // Count the frequency of each character in the string

	        for (char c : str.toCharArray()) {

	            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);

	        }



	        // Find the first non-repeating character

	        for (char c : str.toCharArray()) {

	            if (charCountMap.get(c) == 1) {

	                return c;

	            }

	        }

	        // If there is no non-repeating character, return a default value (such as a space character)

	        return ' ';

	    }

}

compress a string by replacing repeated charcater with their count	
===================================================================

public class StringCompressor {

	public static void main(String[] args) {

        String str = "aabbbccccdd";

        String compressedString = compressString(str);

        System.out.println("Compressed string: " + compressedString);

    }

	    public static String compressString(String str) {

	        StringBuilder compressed = new StringBuilder();

	        int count = 1;



	        for (int i = 0; i < str.length(); i++) {

	            // Check if the current character is the same as the next character

	            if (i + 1 < str.length() && str.charAt(i) == str.charAt(i + 1)) {

	                count++;

	            } else {

	                // Append the current character and its count to the compressed string

	                compressed.append(str.charAt(i));

	                compressed.append(count);

	                count = 1;

	            }

	        }

     // Check if the compressed string is shorter than the original string

	        if (compressed.length() < str.length()) {

	            return compressed.toString();

	        } else {

	            return str;

	        }

	    }    

	}	  

