#Java 8 features

Lambda expression
Help us to write our code in functional style.it provides clear and concise way to implement single abstract method by using expression.
It is very useful in collection library in which it helps to iterate, filter and extract data
It is also known as annonymous function or closures.

In case of lambda expression  we don’t need to define the method for providing  the implementation we just need to write implementation code.
Drawable d=new Drawable(){
Public void draw(){
}}

Method referance
Java 8 method  referance is usd to refer method of functional interface.
Is is compact and easy  form of lambda expression.
Each time when we are using lambda expression to just refering method you can replace your lambda expression with method referance.

Type of method referance
Referance of static method
Referance of instance method
Referance of constructor by using new keyword

Mapping out the instance,static method or cinstructor by using :: colon operator.


Functional interface 
If an interface contain only one abstract method, such type of interfaces are called functional interfaces and the method is called functional method or single abstract method (SAM). 

Ex: 1) Runnable  It contains only run() method 

2) Comparable  It contains only compareTo() method

 3) ActionListener  It contains only actionPerformed() 

4) Callable  It contains only call() method Inside functional interface in addition to single Abstract 
method (SAM) we write any number of default and static methods.

Default method
	• Until 1.7 version onwards inside interface we can take only public abstract methods and public static final variables (every method present inside interface is always public and abstract whether we are declaring or not). 
	•  Every variable declared inside interface is always public static final whether we are declaring or not. 
	•  But from 1.8 version onwards in addition to these, we can declare default concrete methods also inside interface, which are also known as defender methods. 
	
	• We can declare default method with the keyword “default” as follows
	•  1) default void m1(){ 
	• 2) System.out.println (“Default Method”);
	•  
	
Predicate
 A predicate is a function with a single argument and returns boolean value.
  To implement predicate functions in Java, Oracle people introduced Predicate interface in 1.8 version (i.e.,Predicate). 
 Predicate interface present in Java.util.function package. 
 It’s a functional interface and it contains only one method
 i.e., test() Ex: interface Predicate 
{ public boolean test(T t); }
 As predicate is a functional interface and hence it can refers lambda expression.


Stream
 Java provides new additional pkg java.util.stream 
This consist of class,interface and enums to allow functional style operation on the elements
We can use stream by importing java.util.stream
We can use stream to filter,collect,print and convert from one data structor to other.

We can process the objects in the following 2 phases 
1.Configuration 
Filter
Mapping(
Map,Flatmap
)
2.Processing
Processing by collect() method
II.Processing by count()method
III.Processing by sorted()method
IV.Processing by min() and max() methods

                                        map()	                                           flatMap()
The function passed to map() operation returns a single value for a single input.	The function you pass to flatmap() operation returns an arbitrary number of values as the output.
One-to-one mapping occurs in map().	One-to-many mapping occurs in flatMap().
Only perform the mapping.	Perform mapping as well as flattening.
Produce a stream of value.	Produce a stream of stream value.
map() is used only for transformation.	flatMap() is used both for transformation and mapping.

// Java program using map() function
import java.io.*;
import java.util.*;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
class GFG {
   
    public static void main(String[] args)
    {
        // making the array list object
        ArrayList<String> fruit = new ArrayList<>();
        fruit.add("Apple");
        fruit.add("mango");
        fruit.add("pineapple");
        fruit.add("kiwi");
        System.out.println("List of fruit-" + fruit);
       
        // lets use map() to convert list of fruit
        List list = fruit.stream()
                        .map(s -> s.length())
                        .collect(Collectors.toList());
        System.out.println("List generated by map-" + list);
    }
}
Output:
List of fruit-[Apple, mango, pineapple, kiwi]
List generated by map-[5, 5, 9, 4]


// Java program using flatMap() function
import java.io.*;
import java.util.*;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
class GFG {
	public static void main(String[] args)
	{
		// making the arraylist object of List of Integer
		List<List<Integer> > number = new ArrayList<>();
	
		// adding the elements to number arraylist
		number.add(Arrays.asList(1, 2));
		number.add(Arrays.asList(3, 4));
		number.add(Arrays.asList(5, 6));
		number.add(Arrays.asList(7, 8));
	
		System.out.println("List of list-" + number);
	
		// using flatmap() to flatten this list
		List<Integer> flatList
			= number.stream()
				.flatMap(list -> list.stream())
				.collect(Collectors.toList());
	
		// printing the list
		System.out.println("List generate by flatMap-"
						+ flatList);
	}
}
List of list-[[1, 2], [3, 4], [5, 6], [7, 8]]
List generate by flatMap-[1, 2, 3, 4, 5, 6, 7, 8]





Java optional clause
It is public final class and used to deal with nullpointerException in java app
It provides methods which are used to check the presence of values for perticular variable.

Java 8 has introduced a new class Optional in java.util package. It can help in writing a neat code without using too many null checks. By using Optional, we can specify alternate values to return or alternate code to run. This makes the code more readable because the facts which were hidden are now visible to the developer.
It provides methods which are used to check the presence of value for particular variable.
public static <T> Optional<T> empty()
public static <T> Optional<T> ofNullable(T value)
public T get()
public boolean isPresent()
public boolean equals(Object obj)
public int hashCode()
public String toString()




// Java program with Optional Class

import java.util.Optional;

public class OptionalDemo {
	{
		String[] words = new String[10];
		Optional<String> checkNull
			= Optional.ofNullable(words[5]);
		if (checkNull.isPresent()) {
			String word = words[5].toLowerCase();
			System.out.print(word);
		}
		else
			System.out.println("word is null");
	}
}

Output
word is null


Java noshron
Nashron is a jvascript engine ..it is used to excute javascript code .dynamically at jvm.



public static void main(String[] args)

