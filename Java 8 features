#Java 8 features

Lambda expression
It is also known as annonymous function or closures.
Help us to write our code in functional style.it provides clear and concise way to implement single abstract method by using expression.
It is very useful in collection library in which it helps to iterate, filter and extract data
 They are particularly useful for passing behavior as arguments to methods and creating instances of functional interfaces.

In case of lambda expression  we don’t need to define the method for providing  the implementation we just need to write implementation code.
simple lambada function
---------------------------
// Lambda expression to add two numbers
BinaryOperator<Integer> add = (x, y) -> x + y;

// Using the lambda expression

int result = add.apply(3, 5);
System.out.println(result);  // Output will be 8

Method referance
======================
in Java Method referance are a shorthand notation for calling methods that can be used wherever a functional interface is expected.
They provide a more concise and readable way to refer to methods compared to using lambda expressions.
They are particularly useful when the lambda expression simply calls an existing method or constructor, making your code more concise and expressive.

Type of method referance
Referance of static method
Referance of instance method
Referance of constructor by using new keyword

Mapping out the instance,static method or cinstructor by using :: colon operator.

// Lambda expression to convert a string to uppercase
        Function<String, String> toUpperCaseLambda = s -> s.toUpperCase();

        // Method reference to convert a string to uppercase
        Function<String, String> toUpperCaseMethodRef = String::toUpperCase;
//testing 
System.out.println(toUpperCaseLambda.apply("hello"));


Functional interface 
===========================
If an interface contain only one abstract method, such type of interfaces are called functional interfaces and the method is called functional method or single abstract method (SAM). 
 Functional interfaces are used as the target types for lambda expressions and method references.
Ex: 1) Runnable  It contains only run() method 
    2) Comparable  It contains only compareTo() method
    3) ActionListener  It contains only actionPerformed() 
    4) Callable  It contains only call() method Inside functional interface in addition to single Abstract 
method (SAM) we write any number of default and static methods.

Default method
=========================
In Java 8, a default method is a method that is defined in an interface with the default keyword and provides a default implementation.
 This feature allows developers to add new methods to interfaces without breaking the existing implementations of those interfaces.

Key Features of Default Methods:
1. Backward Compatibility
Evolving Interfaces: Before Java 8, adding a new method to an existing interface would break all the classes that implement that interface because they would be forced to implement the new method. Default methods solve this problem by providing a method implementation in the interface itself, so existing classes do not need to change.
Interface Flexibility: This allows interfaces to be extended with new functionality over time without disrupting existing codebases.

2. Multiple Inheritance of Behavior
Combining Interfaces: A class can implement multiple interfaces that contain default methods. This enables multiple inheritance of behavior, which was not possible before Java 8. It allows developers to combine different behaviors in a single class without the need for extensive boilerplate code.
Code Reuse: Default methods allow for code reuse across multiple implementing classes without forcing them to extend an abstract class or base class.

3. Ease of Use for API Designers
API Evolution: Default methods allow API designers to evolve interfaces with minimal impact on existing code. This is especially useful in large frameworks and libraries where maintaining backward compatibility is critical.
Adding Utility Methods: Designers can add utility methods directly in interfaces, which can be used by all implementing classes, improving code consistency and reducing duplication.

4. Functional Programming Support
Enhanced Functional Interfaces: Default methods work seamlessly with functional interfaces, enhancing their usability. For example, the Iterable interface in Java 8 was updated with a forEach method, allowing for functional-style iteration over collections.


5. Encapsulation
Encapsulating Common Code: Default methods allow the encapsulation of common code in interfaces, reducing the need to repeat logic across multiple classes. This helps in maintaining cleaner and more maintainable codebases.

6. Improved Multiple Inheritance Mechanism
Resolving Diamond Problem: Java resolves potential conflicts (e.g., the diamond problem) between default methods from multiple interfaces using a well-defined set of rules, allowing safe and predictable multiple inheritance of behavior.

7. Enhanced Flexibility
Optional Implementation: Implementing classes have the option to override default methods if they need to provide a custom implementation, offering flexibility while still providing a default behavior.


Predicate
In Java, the Predicate interface is a functional interface from the java.util.function package.
It represents a boolean-valued function of one argument and is often used for filtering or matching operations. 
The Predicate interface has a single abstract method, test, which evaluates the condition and returns a boolean result.
 A predicate is a function with a single argument and returns boolean value.
 
 As predicate is a functional interface and hence it can refers lambda expression.

simple predicate function
--------------------------
 // Predicate to check if a number is greater than 10
        Predicate<Integer> isGreaterThanTen = x -> x > 10;

//predicate to check number is even
Predicate<Integer> isEven = number -> number % 2 == 0;



Stream
 Java provides new additional pkg java.util.stream 
This consist of class,interface and enums to allow functional style operation on the elements
We can use stream by importing java.util.stream
We can use stream to filter,collect,print and convert from one data structor to other.

15) Explain intermediate and termminal operation in stream.

Intermediate Operations
Intermediate operations transform a stream into another stream. These operations are lazy; they are not executed until a terminal operation is invoked on the stream. 
Intermediate operations return a new stream, allowing multiple operations to be chained together. Examples include:

filter, map ,sorted, distinct,limit,skip

Terminal operations produce a result or a side effect and mark the end of the stream processing. Once a terminal operation is invoked, the stream is considered consumed and can no longer be used. Examples include:
forEach,toarray,Reduce collect,count,anymatch,allmatch,noneMatch,findFirst,FindAny.
We can process the objects in the following 2 phases 
1.Configuration 
Filter
Mapping(
Map,Flatmap
)
2.Processing
Processing by collect() method
II.Processing by count()method
III.Processing by sorted()method
IV.Processing by min() and max() methods

                                        map()	                                           flatMap()
The function passed to map() operation returns a single value for a single input.	The function you pass to flatmap() operation returns an arbitrary number of values as the output.
One-to-one mapping occurs in map().	                                                One-to-many mapping occurs in flatMap().
Only perform the mapping.	                                                        Perform mapping as well as flattening.
Produce a stream of value.	                                                        Produce a stream of stream value.
map() is used only for transformation.	                                                flatMap() is used both for transformation and mapping.

// Java program using map() function
import java.io.*;
import java.util.*;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
class GFG {
   
    public static void main(String[] args)
    {
        // making the array list object
        ArrayList<String> fruit = new ArrayList<>();
        fruit.add("Apple");
        fruit.add("mango");
        fruit.add("pineapple");
        fruit.add("kiwi");
        System.out.println("List of fruit-" + fruit);
       
        // lets use map() to convert list of fruit
        List list = fruit.stream()
                        .map(s -> s.length())
                        .collect(Collectors.toList());
        System.out.println("List generated by map-" + list);
    }
}
Output:
List of fruit-[Apple, mango, pineapple, kiwi]
List generated by map-[5, 5, 9, 4]


// Java program using flatMap() function
import java.io.*;
import java.util.*;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
class GFG {
	public static void main(String[] args)
	{
		// making the arraylist object of List of Integer
		List<List<Integer> > number = new ArrayList<>();
	
		// adding the elements to number arraylist
		number.add(Arrays.asList(1, 2));
		number.add(Arrays.asList(3, 4));
		number.add(Arrays.asList(5, 6));
		number.add(Arrays.asList(7, 8));
	
		System.out.println("List of list-" + number);
	
		// using flatmap() to flatten this list
		List<Integer> flatList
			= number.stream()
				.flatMap(list -> list.stream())
				.collect(Collectors.toList());
	
		// printing the list
		System.out.println("List generate by flatMap-"
						+ flatList);
	}
}
List of list-[[1, 2], [3, 4], [5, 6], [7, 8]]
List generate by flatMap-[1, 2, 3, 4, 5, 6, 7, 8]





Java optional clause
It is public final class and used to deal with nullpointerException in java app
It provides methods which are used to check the presence of values for perticular variable.

Java 8 has introduced a new class Optional in java.util package. It can help in writing a neat code without using too many null checks.
By using Optional, we can specify alternate values to return or alternate code to run. 
This makes the code more readable because the facts which were hidden are now visible to the developer.
It provides methods which are used to check the presence of value for particular variable.
public static <T> Optional<T> empty()
public static <T> Optional<T> ofNullable(T value)
public T get()
public boolean isPresent()
public boolean equals(Object obj)
public int hashCode()
public String toString()




// Java program with Optional Class

import java.util.Optional;

public class OptionalDemo {
	{
		String[] words = new String[10];
		Optional<String> checkNull
			= Optional.ofNullable(words[5]);
		if (checkNull.isPresent()) {
			String word = words[5].toLowerCase();
			System.out.print(word);
		}
		else
			System.out.println("word is null");
	}
}

Output
word is null

The BiFunction interface
=============================
 in Java is a functional interface that represents a function that accepts two arguments and produces a result. It is part of the java.util.function package, which was introduced in Java 8 to provide a variety of functional interfaces for use in functional-style programming


Java noshron
Nashron is a jvascript engine ..it is used to excute javascript code dynamically at jvm.

what is MetaSpace how it is diff from permanenet generation
=============================================================
before java 8 there is concept of permanent generation and generally whenever claases are loaded those are store in parment genration.and 
they are never unloaded in parmanant geneation.
from java 8 the concept metaspace which can load classess and if you think you have not loaded some classess then you can unload those classess 
i.e concept of metaspace.

