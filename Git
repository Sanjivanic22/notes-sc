Git
===
Versin Control system-its developed to co-ordinate the work among the developes

Features of Git
=================
Open source-GPL license
distributed-on another machin  user can easily clone
scalable-large no users can use
security-secure,uses SHAI to name and identity the object
speed-most of the operation on local repo
branching and Merging-
branch-it will diverge from main ,we can create multiple branches,we can merge after completion of work
staging area-preview of next commit

benefit of git
==============
save time
offline working 
undo mistake
track change

import terminology
==============================
Branch-repository diverge from main working director
checkout-used for the act of switching b/w diff version of target 
clone- making copy from server
merge-combining branches
origine-remote repository from project was initially cloned
pull-recieve the data from the server(GITHUB)
push-upload local repository to server
Git ignore-user for intentionaly untrack the file
git diff-shw changes b/w commit ,working tree
Git Rm-from removing files

Git commands and uses
---------------------
open with desktop
then 
mkdir project --create folder
touch names.txt-->create file
git status --check status or untrack and trak fils
git add names.txt-->add the file in staged area
git commit -m "names.txt added"-->commit the untrack file
vin names.txt -->write somting in file
 git restore --staged names.txt-->restore the file which added and modified
 git log-->check history
 rm -rf names.txt-->for deleting file
 git reset 58e840b22c77f5c43638fc694fb6a3495da772ae--> for not showing the status in history so just copy hash id next to that below id it will remove
 previous comments
 git branch matster
 git branch --list
 git branch login
 git merge login
 git pull upstream main
 gt push origin main
 fork
 git clone url
 git 
 merge conflict
 same line cheged by different person the n github will confused which chage need to cinsider
 
 gimerge all commit at atime
 pick squash
 
 
# notes-sc
================

## Git Commands:
## 1)git config
Usage: git config –global user.name “[name]”  
Usage: git config –global user.email “[email address]”  
This command sets the author name and email address respectively to be used with your commits.

## 2)git init
Usage: git init [repository name]
This command is used to start a new repository.

## 3)git clone
Usage: git clone [url]  
This command is used to obtain a repository from an existing URL.

## 4)git add
Usage: git add [file]  
This command adds a file to the staging area.

Usage: git add *  
This command adds one or more to the staging area.

## 5)git commit
Usage: git commit -m “[ Type in the commit message]”  
This command records or snapshots the file permanently in the version history.

Usage: git commit -a  
This command commits any files you’ve added with the git add command and also commits any files you’ve changed since then.

## 6)git diff
Usage: git diff  
This command shows the file differences which are not yet staged.

Usage: git diff –staged 
This command shows the differences between the files in the staging area and the latest version present.

Usage: git diff [first branch] [second branch]  
This command shows the differences between the two branches mentioned

## 7)git reset
Usage: git reset [file]  
This command unstages the file, but it preserves the file contents.

Usage: git reset [commit]  
This command undoes all the commits after the specified commit and preserves the changes locally.

Usage: git reset –hard [commit]
This command discards all history and goes back to the specified commit.

# 8)git status
Usage: git status  
This command lists all the files that have to be committed.

## 9)git rm
Usage: git rm [file]  
This command deletes the file from your working directory and stages the deletion.

## 10)git log
Usage: git log  
This command is used to list the version history for the current branch.

Usage: git log –follow[file]  
This command lists version history for a file, including the renaming of files also.

## 11)git show
Usage: git show [commit]  
This command shows the metadata and content changes of the specified commit.

## 12)git tag
Usage: git tag [commitID]  
This command is used to give tags to the specified commit.

## 13)git branch
Usage: git branch  
This command lists all the local branches in the current repository.

Usage: git branch [branch name] 
This command creates a new branch.

Usage: git branch -d [branch name]  
This command deletes the feature branch.

## 14)git checkout
Usage: git checkout [branch name] 
This command is used to switch from one branch to another.

Usage: git checkout -b [branch name]  
This command creates a new branch and also switches to it.

# 15)git merge
Usage: git merge [branch name]  
This command merges the specified branch’s history into the current branch.

## 16)git remote
Usage: git remote add [variable name] [Remote Server Link] 
This command is used to connect your local repository to the remote server.

## 17)git push
Usage: git push [variable name] master  
This command sends the committed changes of master branch to your remote repository.

Usage: git push [variable name] [branch]  
This command sends the branch commits to your remote repository.

Usage: git push –all [variable name]  
This command pushes all branches to your remote repository.

Usage: git push [variable name] :[branch name] 
This command deletes a branch on your remote repository.

## 18)git pull
Usage: git pull [Repository Link]  
This command fetches and merges changes on the remote server to your working directory.

## 19)git stash
Usage: git stash save  
This command temporarily stores all the modified tracked files.

## 20)Usage: git stash pop 
This command restores the most recently stashed files.

Usage: git stash list  
This command lists all stashed changesets.

Usage: git stash drop  
This command discards the most recently stashed changeset.


Git 


Common Git Commands
Setup
Configure Git

git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"

Basic Commands

1)Initialize a Repository
git init
Creates a new Git repository in the current directory.

2)Clone a Repository

git clone https://github.com/user/repo.git
Copies a remote repository to your local machine.

3)Check Status

git status
Shows the status of your working directory and staging area.

4)Add Changes

git add <file>
git add .
Adds changes in the specified file(s) or all changes to the staging area.

5)Commit Changes

git commit -m "Commit message"
Records changes in the repository with a descriptive message.

6)View Commit History

git log
Shows a log of commits in the current branch.

7)Branching and Merging
Create a New Branch

git branch <branch-name>
Creates a new branch.

8)Switch to a Branch

git checkout <branch-name>
Switches to the specified branch.

9)Create and Switch to a New Branch

git checkout -b <branch-name>
Creates a new branch and switches to it immediately.

10)Merge a Branch
git merge <branch-name>
Merges the specified branch into the current branch.

11)Delete a Branch

git branch -d <branch-name>
Deletes the specified branch.

Working with Remotes
--------------------------
1)Add a Remote

git remote add origin https://github.com/user/repo.git
Adds a remote repository.

2)Fetch Changes

git fetch
Downloads objects and refs from another repository.

3)Pull Changes

git pull
Fetches and integrates changes from a remote repository to your local branch.

4)Push Changes
git push
Uploads your local branch commits to the remote repository.

Advanced Commands
-----------------------
1)Stash Changes

git stash
Temporarily saves your modified files and reverts them to the last committed state.

2)Apply Stashed Changes
git stash apply
Applies the most recently stashed changes.

2)Revert a Commit

git revert <commit-hash>
Creates a new commit that undoes the changes made by the specified commit.

3)Reset to a Previous State
git reset --hard <commit-hash>
Resets your working directory and index to the specified commit.

4)Delete a Local Branch (Safely)

git branch -d <branch-name>
This command deletes the branch only if it has been fully merged with its upstream branch or another branch. It is a safe way to delete branches that have already been integrated.

5)Force Delete a Local Branch
git branch -D <branch-name>
This command forcefully deletes the branch regardless of its merge status. Use this with caution, as it can potentially delete work that hasn't been merged.

Deleting a Remote Branch
To delete a branch from a remote repository, you need to use the git push command with the --delete option:

Delete a Remote Branch
git push origin --delete <branch-name>

git branch -d <branch-name>: Safely delete a local branch that has been fully merged.
git branch -D <branch-name>: Forcefully delete a local branch, regardless of its merge status.
git push origin --delete <branch-name>: Delete a branch from the remote repository.

Best Practices
Write Meaningful Commit Messages: Describe what changes were made and why.
Branch Frequently: Use branches for new features, bug fixes, and experiments.
Regularly Pull from Remote: Stay updated with changes from others to avoid conflicts.
Review and Test Before Merging: Ensure that code is reviewed and tested before merging into the main branch.
Keep Repositories Clean: Delete branches that are no longer needed.



















