Spring Annotations
==================
Core Spring Framework Annotations
@Required: 
It applies to the bean setter method. It indicates that the annotated bean must be populated at configuration time with the required property, 
else it throws an exception BeanInitilizationException.

Example
public class Machine   
{  
private Integer cost;  
@Required  
public void setCost(Integer cost)   
{  
this.cost = cost;  
}  
public Integer getCost()   
{  
return cost;  
}     
}  
@Autowired: Spring provides annotation-based auto-wiring by providing @Autowired annotation.
It is used to autowire spring bean on setter methods, instance variable, and constructor. When we use @Autowired annotation, the spring container auto-wires 
the bean by matching data-type.

Example
@Component  
public class Customer  
{  
private Person person;  
@Autowired  
public Customer(Person person)   
{   
this.person=person;  
}  
}  
@Configuration: 
It is a class-level annotation. The class annotated with @Configuration used by Spring Containers as a source of bean definitions.

Example

@Configuration  
public class Vehicle  
{  
@BeanVehicle engine()  
{  
return new Vehicle();  
}  
}  
@ComponentScan: 
It is used when we want to scan a package for beans. It is used with the annotation @Configuration. 
We can also specify the base packages to scan for Spring Components.

Example
@ComponentScan(basePackages = "com.javatpoint")  
@Configuration  
public class ScanComponent  
{  
// ...  
}  
@Bean: 
It is a method-level annotation. It is an alternative of XML <bean> tag. It tells the method to produce a bean to be managed by Spring Container.

Example

@Bean  
public BeanExample beanExample()   
{  
return new BeanExample ();  
}  
Spring Framework Stereotype Annotations

@Component: 
It is a class-level annotation. It is used to mark a Java class as a bean. A Java class annotated with @Component is found during the classpath.
The Spring Framework pick it up and configure it in the application context as a Spring Bean.

Example

@Component  
public class Student  
{  
.......  
}  
@Controller: The @Controller is a class-level annotation. It is a specialization of @Component. It marks a class as a web request handler. 
It is often used to serve web pages. By default, it returns a string that indicates which route to redirect. 
It is mostly used with @RequestMapping annotation.

Example
@Controller  
@RequestMapping("books")  
public class BooksController   
{  
@RequestMapping(value = "/{name}", method = RequestMethod.GET)  
public Employee getBooksByName()   
{  
return booksTemplate;  
}  
}  
@Service: It is also used at class level. It tells the Spring that class contains the business logic.
Example

package com.javatpoint;  
@Service  
public class TestService  
{  
public void service1()  
{  
//business code  
}  
}  
@Repository:
It is a class-level annotation. The repository is a DAOs (Data Access Object) that access the database directly. 
The repository does all the operations related to the database.

@Autowired: Used for dependency injection. It automatically wires up dependencies by type.
Spring provides annotation-based auto-wiring by providing @Autowired annotation. It is used to autowire spring bean on setter methods, instance variable, and constructor.
When we use @Autowired annotation, the spring container auto-wires the bean by matching data-type.

 `@Qualifier`: Used along with `@Autowired` to specify which bean should be injected if there are multiple beans of the same type.
Is used to specify which bean should be injected when multiple beans of the same type are present.it is often used in conjuction with @Autowird to clarify which specific bean should be wired. 
Used to inject values from external sources(properties files, environment variables, etc.) into Spring beans.

`@Component`: Indicates that a class is a Spring component and should be automatically detected and registered as a bean.
Spring Boot Annotations
==========================
@SpringBootApplication
A single @SpringBootApplication annotation is used to enable the following annotations:
 It auto-configures the bean that is present in the classpath and configures it to run the methods.
	• @EnableAutoConfiguration: It enables the Spring Boot auto-configuration mechanism.
	• @ComponentScan: It scans the package where the application is located.
@Configuration: It allows us to register extra beans in the context or import additional configuration classes.

2.@Controller
this annotation is used to amark the class as wbecontroller.it typically handle the incomming http request ,perfrom request processing logics and 
return a value a response.


`@RestController`
this annotation is specialized version of @controller that conbines the @controller and @ResponseBody annotation.
it is used to mark class as restful webserbice controlller.it handles the http request and directly return the response body in format such json or xml.




Spring MVC and REST Annotations
-----------------------------------
@RequestMapping: 
It is used to map the web requests. It has many optional elements like consumes, header, method, name, params, path, produces, and value.
We use it with the class as well as the method.
Example

@Controller  
public class BooksController   
{  
@RequestMapping("/computer-science/books")  
public String getAllBooks(Model model)  
{  
//application code  
return "bookList";  
}  
@GetMapping: 
It maps the HTTP GET requests on the specific handler method. It is used to create a web service endpoint that fetches It is used instead of using:
@RequestMapping(method = RequestMethod.GET)

@PostMapping: 
It maps the HTTP POST requests on the specific handler method. It is used to create a web service endpoint that creates It is used instead of using:
@RequestMapping(method = RequestMethod.POST)

@PutMapping: 
It maps the HTTP PUT requests on the specific handler method. 
It is used to create a web service endpoint that creates or updates It is used instead of using: @RequestMapping(method = RequestMethod.PUT)

@DeleteMapping: 
It maps the HTTP DELETE requests on the specific handler method. It is used to create a web service endpoint that deletes a resource. 
It is used instead of using: @RequestMapping(method = RequestMethod.DELETE)

@PatchMapping: 
It maps the HTTP PATCH requests on the specific handler method. It is used instead of using: @RequestMapping(method = RequestMethod.PATCH)

@RequestBody: 
It is used to bind HTTP request with an object in a method parameter. Internally it uses HTTP MessageConverters to convert the body of the request. 
When we annotate a method parameter with @RequestBody, the Spring framework binds the incoming HTTP request body to that parameter.

@ResponseBody: 
It binds the method return value to the response body. It tells the Spring Boot Framework to serialize a return an object into JSON and XML format.

@PathVariable:
It is used to extract the values from the URI. It is most suitable for the RESTful web service, where the URL contains a path variable.
We can define multiple @PathVariable in a method.

@RequestParam: 
It is used to extract the query parameters form the URL. It is also known as a query parameter. It is most suitable for web applications. 
It can specify default values if the query parameter is not present in the URL.

@RequestHeader: 
It is used to get the details about the HTTP request headers. We use this annotation as a method parameter.
The optional elements of the annotation are name, required, value, defaultValue. 
For each detail in the header, we should specify separate annotations. We can use it multiple time in a method

@RestController: It can be considered as a combination of @Controller and @ResponseBody annotations. 
The @RestController annotation is itself annotated with the @ResponseBody annotation. 
It eliminates the need for annotating each method with @ResponseBody.

@RequestAttribute: It binds a method parameter to request attribute.
It provides convenient access to the request attributes from a controller method. With the help of @RequestAttribute annotation, 
we can access objects that are populated on the server-side.

To handle the exception in springboot
=======================================

@ExceptionHandler
----------------------
by using this annotation you can define method in your controller class to handle the specific exceptions.
Annnotated method can have a specific exception type as a parameter,allowing you to handle the perticular exception.

@ControllerAdvise
------------------------
Allows you to define global exception handler that are applied across multiple controler
it is useful for centralizing exception handling logic and applying consistant error handling across the app
@ResponseStatus
-----------------
to define http status code to be return when the exception occures.


