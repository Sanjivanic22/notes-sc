what is Springboot?
------------------
	• Springboot is project i.e built on the top of spring framework
	• It provides esier and faster ways to set up ,configure and run both simple and web based application.
	• It provides rapid application development.
	
	•  Spring Boot is a module of the Spring Framework that provides a simplified way to create Spring-based applications with minimal configuration.

   Advantages
---------------
	• Springboot reduce the lots of development time and increase the productivity
	• It avaoides boilerplate code ,annotation and xml configurations
	• It provides lots of plugins to develop and test springboot app very easily build tool like maven and gradle
	• It test the web application easily with the help of different embedded http srvers like tomcat and jetti
	• Here don’t need to deployee the war files.
	•  increased productivity, reduced configuration, simplified dependency management, and easier deployment.
	
	Disadvatages
     ----------------------
	It is very tough and time consuming process to convert existing legacy spring framework project into spring boot app.
	It is application only for brand new/greenfield spring project
	• 
	• Application
   --------------------------
	• Using springboot we can develop the stanalone apps,web app,distributed app and entrprise app.
	
	• Profiling
      =======================
	• Profile is also called as environment
	• The setup required to execute the app or project for development is called profile or env
	• This include .class file.properties/yml file,libraries servers ,db s/w like oracle etc.
	• From development to release/maintainance the project code/app code has executed in diff env/profiles like dev,test/prod profile.
	• To make spring work only for certain profile activation we can use @profile annotation along with stearotype annotation for @Bean annotation.


How to handle the exception in springboot
=============================================

we can handle the exception in spring boot using some anootataions like
@ExceptionHandler
----------------------
by using this annotation you can define method in your controller class to handle the specific exceptions.
Annnotated method can have a specific exception type as a parameter,allowing you to handle the perticular exception.

@ControllerAdvise
------------------------
Allows you to define global exception handler that are applied across multiple controler
it is useful for centralizing exception handling logic and applying consistant error handling across the app
@ResponseStatus
-----------------
to define http status code to be return when the exception occures.


what is the diff b/w put ,post and Patch
=============================================
post -is user for create the new resourse on server
ex.createing new user  account on the server
put-is user for updating to existing resources on the server
ex.updating a users information 
Patch-is used for updating some of the data or partial information on server 
ex updating  users phone or mail id.


Diff b/w spring and springboot
=======================================
	• Spring framework widely used Java EE framework for building application
	• Springboot framework is widely used to develop Rest Apis.
	• Spring simplifies the JAVA EE develpement that makes programmer productive
	• Springboot shorten the code length and provide easier way to develop webapp
	• Primary feature of spring is dependancy injection
	• Primary features of springboot is  autoconfiguration.
	• Spring helps us to develop loosly coupled app
	• Spring boot help us to create the standalone app with cofiguration
	• Developers need to write lots of boiler plate code
	• In spring boot  it reduces the boiler plates code 
	• In spring define dependancues for the spring project in pom.xml.
	• In spring boot there is strater in pom.xml file that internally take care of downloading the dependancies.

Transaction management
=========================
In an enterprise application, a transaction is a sequence of actions performed by the application that together pipelined to perform a single operation. 
For example, booking a flight ticket is also a transaction where the end user has to enter his information and then make a payment to book the ticket.

 if a user has entered his information the user’s information gets stored in the user_info table

 Now, to book a ticket he does an online payment and due to some reason(system failure) the payment has been canceled so, the ticket is not booked for him. But, the problem is that his information gets stored on the user_info table. On a large scale, more than thousands of these things happen within a single day. So, it is not good practice to store a single action of the transaction(Here, only user info is stored not the payment info).

To overcome these problems, spring provides transaction management  which uses annotation to handle these issues
. In such a scenario, spring stores the user information in temporary memory and then checks for payment information if the payment is successful then it will complete 
the transaction otherwise it will roll back the transaction and the user information does not gets stored in the database.


spring data jpa
======================
Entities and Mapping: 
----------------------
Entities represent persistent data objects that are mapped to database tables.
Spring Data JPA uses annotations such as @Entity, @Table, @Column, and @Id to define entities and their mappings to database tables and columns.

Repositories:
-----------------
 Repositories provide an abstraction for performing CRUD 
 (Create, Read, Update, Delete) operations on entities.
 The CrudRepository interface provides basic CRUD methods,````````````
 while the JpaRepository interface extends it with additional querying capabilities. 
 Custom repository methods can be defined using method naming conventions or by writing JPQL or native SQL queries.

Query Methods:
--------------
 Spring Data JPA allows you to define repository methods by method name conventions.
 By following naming patterns, you can easily define queries without writing explicit JPQL or SQL queries. 
 For example, findByFirstName(String firstName) generates a query to find entities by the firstName attribute.

Associations: 
--------------
Spring Data JPA supports different types of associations between entities, such as one-to-one, one-to-many, 
many-to-one, and many-to-many relationships. 
These associations are defined using annotations like @OneToOne, 
@OneToMany, @ManyToOne, and @ManyToMany.

Transactions: 
---------------
Transactions ensure data consistency and integrity during database operations. Spring Data JPA leverages 
the transaction management capabilities provided by Spring Framework, allowing you to annotate methods or classes 
with @Transactional to enable transactional behavior.

Paging and Sorting: 
-----------------------
Spring Data JPA provides built-in support for pagination and sorting. 
You can use methods like findAll(Pageable pageable) or findAll(Sort sort) to retrieve data in paginated or sorted formats.

Auditing: 
--------------
Spring Data JPA offers auditing capabilities to automatically track and store additional information about entity modifications, 
such as creation and modification timestamps, and the user responsible for the changes. This is achieved using annotations like
 @CreatedBy, @LastModifiedBy, @CreatedDate, and @LastModifiedDate.

Native Queries: 
--------------
Spring Data JPA allows you to execute native SQL queries using the @Query annotation with the nativeQuery parameter set 
to true. This is useful for complex queries that cannot be expressed using JPQL or require the use of database-specific features.

Caching:
-------------
 Spring Data JPA integrates with the Spring Framework's caching capabilities. 
 You can enable caching for repository methods using annotations like @Cacheable, @CacheEvict, and @CachePut, 
 reducing database access and improving application performance.

Specifications and Criteria API:
----------------------------------
Specifications and the Criteria API provide a way to build complex queries dynamically. 
Specifications allow you to define reusable query conditions, while the Criteria API provides a type-safe and object-oriented way 
to build queries programmatically.



 Q: What is the auto-configuration feature in Spring Boot? 
A: The auto-configuration feature in Spring Boot automatically configures the application based on the dependencies that are added to the classpath.

Q: What is the Spring Boot starter project? 
A: The Spring Boot starter project is a template that includes the necessary dependencies and configuration files to quickly create a Spring Boot application.

Spring boot starter is ready made spring project available in internate repository like maven/gradle repository in the form of advanced jar files having capability to perform common tas of the project or App development through AutoConfiguration features.

Q: How do you configure the application properties in Spring Boot?
 A: You can configure the application properties in Spring Boot by using the application.properties or application.yml file.

Q: What is the Spring Boot Actuator? 
A: The Spring Boot Actuator is a module of Spring Boot that provides endpoints to monitor and manage the application.
Q: How do you enable the Spring Boot Actuator in an application? 
A: You can enable the Spring Boot Actuator in an application by adding the necessary dependencies and configuration properties to the project.

Q: What is Spring Boot Data JPA?
 A: Spring Boot Data JPA is a module of Spring Boot that provides support for the Java Persistence API (JPA) for data access.

Q: What is Spring Boot Security? 
A: Spring Boot Security is a module of Spring Boot that provides support for securing web applications.

Q: How do you configure database connection in Spring Boot? 
A: You can configure database connection in Spring Boot by specifying the necessary properties in the application.properties or application.yml file.

Q: How do you create a RESTful web service in Spring Boot? 
A: You can create a RESTful web service in Spring Boot by using the @RestController and @RequestMapping annotations, and by returning data in JSON format.

Q: What is Spring Boot Test?
 A: Spring Boot Test is a module of Spring Boot that provides support for testing Spring-based applications.

springboot anotations
@SpringBootApplication
A single @SpringBootApplication annotation is used to enable the following annotations:
	• @EnableAutoConfiguration: It enables the Spring Boot auto-configuration mechanism.
	• @ComponentScan: It scans the package where the application is located.
@Configuration: It allows us to register extra beans in the context or import additional configuration classes.

2.@Controller
this annotation is used to amark the class as wbecontroller.it typically handle the incomming http request ,perfrom request processing logics and 
return a value a response.


`@RestController`
this annotation is specialized version of @controller that conbines the @controller and @ResponseBody annotation.
it is used to mark class as restful webserbice controlller.it handles the http request and directly return the response body in format such json or xml.

`@RequestMapping`:
It is used to map the web requests. It has many optional elements like consumes, header, method, name, params, path, produces, and value.
We use it with the class as well as the method.

• @GetMapping: It maps the HTTP GET requests on the specific handler method. 
It is used to create a web service endpoint that fetches It is used instead of using: @RequestMapping(method = RequestMethod.GET)

• @PostMapping: It maps the HTTP POST requests on the specific handler method.
It is used to create a web service endpoint that creates It is used instead of using: @RequestMapping(method = RequestMethod.POST)

`@PathVariable`: Used to bind a method parameter to a URI template variable in a request URL.
this is used extract pathvariable from the request url.path variable are dynamic part of url that embede with &?

6. `@RequestParam`: Binds a method parameter to a query parameter in the request.
this annotation is used to extract the query parameter or form data from the request URL.it allows you to retrive individual request parameter by name and provides options for setting default values.
handling optional parameter and providing to diff datatypes 

• @RequestBody: It is used to bind HTTP request with an object in a method parameter. Internally it uses HTTP MessageConverters to convert the body of the request.
When we annotate a method parameter with @RequestBody, the Spring framework binds the incoming HTTP request body to that parameter.

• @ResponseBody: It binds the method return value to the response body. It tells the Spring Boot Framework to serialize a return an object into JSON and XML format.

 @Autowired: Used for dependency injection. It automatically wires up dependencies by type.
Spring provides annotation-based auto-wiring by providing @Autowired annotation. It is used to autowire spring bean on setter methods, instance variable, and constructor.
When we use @Autowired annotation, the spring container auto-wires the bean by matching data-type.

 `@Qualifier`: Used along with `@Autowired` to specify which bean should be injected if there are multiple beans of the same type.
Is used to specify which bean should be injected when multiple beans of the same type are present.it is often used in conjuction with @Autowird to clarify which specific bean should be wired. 


   Used to inject values from external sources(properties files, environment variables, etc.) into Spring beans.

 `@Component`: Indicates that a class is a Spring component and should be automatically detected and registered as a bean.


 `@Service`: A specialization of `@Component` used to mark a class as a service.

13. `@Repository`: A specialization of `@Component` used to mark a class as a data repository.

14. `@Configuration`: Indicates that a class provides Spring configuration, typically for bean definitions.

15. `@EnableScheduling`: Used to enable scheduling capabilities for methods within a Spring bean.

16. `@Transactional`: Used to annotate methods or classes to indicate that they should be executed within a transaction context.

17. `@EnableCaching`: Enables Spring's caching support for methods within a class.

18. `@Valid`: Used to trigger validation of method parameters or request body objects.

19. `@ExceptionHandler`: Used to define methods that handle exceptions thrown by the application.

20. `@Async`: Marks a method as asynchronous, allowing it to be executed in a separate thread.








