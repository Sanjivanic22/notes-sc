what is Springboot?
------------------
•  Spring Boot is a module of the Spring Framework that provides a simplified way to create Spring-based applications with minimal configuration.
 that makes it easier to create and run Java applications.
	• It provides esier and faster ways to set up ,configure and run both simple and web based application.
	• It provides rapid application development.
2. It simplifies the configuration and setup process, allowing developers to focus more on writing code for their applications.
a. Configurations
b. Dependency Management
C. Embedded Server

Spring Boot provide many advantages over normal spring framework
====================================================================
        • Springboot reduce the lots of development time and increase the productivity
	• It avaoides boilerplate code ,annotation and xml configurations
	• It provides lots of plugins to develop and test springboot app very easily build tool like maven and gradle
	• It test the web application easily with the help of different embedded http srvers like tomcat and jetti
	• Here don’t need to deployee the war files.
	•  increased productivity, reduced configuration, simplified dependency management, and easier deployment.
	b. Production Ready applications- Metrix, Health Check and many features are designed for production ready application.
c. Rapid Development- Opinionated approach and auto-configuration enable developers to quickly develop apps
d. Provide Dependency Management- No need to manage separate dependencies manually.
e. Autoconfiguration - Spring Boot AutoConfigure things by default.


	Disadvatages
     ----------------------
	It is very tough and time consuming process to convert existing legacy spring framework project into spring boot app.
	It is application only for brand new spring project
	
	• Application
   --------------------------
	• Using springboot we can develop the stanalone apps,web app,distributed app and entrprise app.

working of springBoot app
===========================
1. Spring Boot starts by scanning the starter dependencies in pom.xml
Then download and auto-configure the module as you included in pom.xml
For example we have to create web application then we have to put spring-boot-starter-web dependency in pom.xml.
When we start the project spring boot downloads all the dependency required for web and configure the things like spring mvc.

Diff b/w spring and springboot
=======================================
Configuration:
Spring: Requires extensive configuration, often using XML or Java annotations.
Spring Boot: Uses auto-configuration and convention-over-configuration, significantly reducing the amount of setup required.

Dependency Management:
Spring: Requires manual management of dependencies.
Spring Boot: Provides starter dependencies that aggregate commonly used dependencies into simple-to-use groups.

Embedded Server:
Spring: Applications typically need to be deployed to an external server.
Spring Boot: Includes embedded servers, allowing you to run applications directly with java -jar.

Starter Projects:
Spring: Does not include starter projects.
Spring Boot: Provides starter projects to quickly get started with different types of applications.

Development Speed:
Spring: Requires more setup and configuration, which can slow down initial development.
Spring Boot: Accelerates development with its opinionated defaults and auto-configuration.

Microservices:
Spring: Can be used to build microservices, but requires more manual configuration.
Spring Boot: Designed with microservices in mind, making it easier to create and deploy microservices.
	
	• Profiling
      =======================
-> Profiling in Spring Boot is a way to define and manage different configurations for different environments
(such as development, testing, staging, production, etc.) within the same application.
It allows you to specify which set of configurations should be used when the application runs in a specific environment.
• To make spring work only for certain profile activation we can use @profile annotation along with stearotype annotation for @Bean annotation.
• From development to release/maintainance the project code/app code has executed in diff env/profiles like dev,test/prod profile.
In Spring Boot, you can activate a profile in several ways. Here are the common methods to activate a profile:

### 1. Using Application Properties or YAML File
 2. Using Command-Line Arguments
3. Using Environment Variables
4. Using Programmatically in Code
6. Using `@ActiveProfiles` in Tests
5.Using `applicationContextInitializer`

You can specify the active profile in your `application.properties` or `application.yml` file.

#### application.properties:
```properties
spring.profiles.active=dev
```

#### application.yml:
```yaml
spring:
  profiles:
    active: dev
```

### 2. Using Command-Line Arguments

You can activate a profile when running your Spring Boot application from the command line.

#### Example:
```bash
java -jar myapp.jar --spring.profiles.active=dev
```

Or, if you are using Maven:

```bash
mvn spring-boot:run -Dspring-boot.run.profiles=dev
```

### 3. Using Environment Variables

You can set an environment variable to specify the active profile.

#### Example:
```bash
export SPRING_PROFILES_ACTIVE=dev
```

### 4. Using Programmatically in Code

You can activate a profile programmatically in your main application class.

@SpringBootApplication
public class MyApplication {
    public static void main(String[] args) {
        System.setProperty(AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME, "dev");
        SpringApplication.run(MyApplication.class, args);
    }
}
```

### 5. Using `applicationContextInitializer`

You can also activate a profile using `ApplicationContextInitializer`.

#### Example:
public class MyApplicationContextInitializer
        implements ApplicationContextInitializer<ConfigurableApplicationContext> {

    @Override
    public void initialize(ConfigurableApplicationContext applicationContext) {
        ConfigurableEnvironment environment = applicationContext.getEnvironment();
        environment.addActiveProfile("dev");
    }
}
```

Then, register the initializer in your main application class:

@SpringBootApplication
public class MyApplication {
    public static void main(String[] args) {
        SpringApplication application = new SpringApplication(MyApplication.class);
        application.addInitializers(new MyApplicationContextInitializer());
        application.run(args);
    }
}
```

### 6. Using `@ActiveProfiles` in Tests

You can activate profiles in tests using the `@ActiveProfiles` annotation.

#### Example:
@SpringBootTest
@ActiveProfiles("test")
public class MyApplicationTests {
    @Test
    public void contextLoads() {
    }
}
```


How to handle the exception in springboot
=============================================

we can handle the exception in spring boot using some anootataions like
@ExceptionHandler
----------------------
by using this annotation you can define method in your controller class to handle the specific exceptions.
Annnotated method can have a specific exception type as a parameter,allowing you to handle the perticular exception.

@ControllerAdvise
------------------------
Allows you to define global exception handler that are applied across multiple controler.
it is useful for centralizing exception handling logic and applying consistant error handling across the app

@ResponseStatus
-----------------
to define http status code to be return when the exception occures.


what is the diff b/w put ,post and Patch
=============================================
post -is user for create the new resourse on server
ex.createing new user  account on the server
put-is user for updating to existing resources on the server
ex.updating a users information 
Patch-is used for updating some of the data or partial information on server 
ex updating  users phone or mail id.

Transaction management
=========================
-> Spring's transaction management simplifies handling transactions in Java applications, ensuring data consistency and integrity with minimal boilerplate code.

->In an enterprise application, a transaction is a sequence of actions performed by the application that together pipelined to perform a single operation.
-> in applications that involve multiple database operations.
-> that allows developers to define transaction boundaries declaratively or programmatically.
-> A transaction must be atomic, consistent, isolated, and durable (ACID properties).
->  You can use  The @Transactional annotations to define transaction boundaries Using @Transactional Annotation and 
 annotation can be applied to methods or classes. When applied to a class, it affects all public methods of the class.

For example, booking a flight ticket is also a transaction where the end user has to enter his information and then make a payment to book the ticket.

if a user has entered his information the user’s information gets stored in the user_info table

 Now, to book a ticket he does an online payment and due to some reason(system failure) the payment has been canceled so, the ticket is not booked for him. But, the problem is that his information gets stored on the user_info table. On a large scale, more than thousands of these things happen within a single day. So, it is not good practice to store a single action of the transaction(Here, only user info is stored not the payment info).
To overcome these problems, spring provides transaction management  which uses annotation to handle these issues
. In such a scenario, spring stores the user information in temporary memory and then checks for payment information if the payment is successful then it will complete 
the transaction otherwise it will roll back the transaction and the user information does not gets stored in the database.
 

spring data jpa
======================
Entities and Mapping: 
----------------------
Entities represent persistent data objects that are mapped to database tables.
Spring Data JPA uses annotations such as @Entity, @Table, @Column, and @Id to define entities and their mappings to database tables and columns.

Repositories:
-----------------
 Repositories provide an abstraction for performing CRUD 
 (Create, Read, Update, Delete) operations on entities.
 The CrudRepository interface provides basic CRUD methods,````````````
 while the JpaRepository interface extends it with additional querying capabilities. 
 Custom repository methods can be defined using method naming conventions or by writing JPQL or native SQL queries.

Query Methods:
--------------
 Spring Data JPA allows you to define repository methods by method name conventions.
 By following naming patterns, you can easily define queries without writing explicit JPQL or SQL queries. 
 For example, findByFirstName(String firstName) generates a query to find entities by the firstName attribute.

Associations: 
--------------
Spring Data JPA supports different types of associations between entities, such as one-to-one, one-to-many, 
many-to-one, and many-to-many relationships. 
These associations are defined using annotations like @OneToOne, 
@OneToMany, @ManyToOne, and @ManyToMany.

Transactions: 
---------------
Transactions ensure data consistency and integrity during database operations. Spring Data JPA leverages 
the transaction management capabilities provided by Spring Framework, allowing you to annotate methods or classes 
with @Transactional to enable transactional behavior.

Paging and Sorting: 
-----------------------
Spring Data JPA provides built-in support for pagination and sorting. 
You can use methods like findAll(Pageable pageable) or findAll(Sort sort) to retrieve data in paginated or sorted formats.

Auditing: 
--------------
Spring Data JPA offers auditing capabilities to automatically track and store additional information about entity modifications, 
such as creation and modification timestamps, and the user responsible for the changes. This is achieved using annotations like
 @CreatedBy, @LastModifiedBy, @CreatedDate, and @LastModifiedDate.

Native Queries: 
--------------
Spring Data JPA allows you to execute native SQL queries using the @Query annotation with the nativeQuery parameter set 
to true. This is useful for complex queries that cannot be expressed using JPQL or require the use of database-specific features.

Caching:
-------------
 Spring Data JPA integrates with the Spring Framework's caching capabilities. 
 You can enable caching for repository methods using annotations like @Cacheable, @CacheEvict, and @CachePut, 
 reducing database access and improving application performance.

Specifications and Criteria API:
----------------------------------
Specifications and the Criteria API provide a way to build complex queries dynamically. 
Specifications allow you to define reusable query conditions, while the Criteria API provides a type-safe and object-oriented way 
to build queries programmatically.


 Q: What is the auto-configuration feature in Spring Boot? 
A: The auto-configuration feature in Spring Boot automatically configures the application based on the dependencies that are added to the classpath.

Q: What is the Spring Boot starter project? 
A: The Spring Boot starter project is a template that includes the necessary dependencies and configuration files to quickly create a Spring Boot application.

Spring boot starter is ready made spring project available in internate repository like maven/gradle repository in the form of advanced jar files having capability to perform common tas of the project or App development through AutoConfiguration features.

Q: How do you configure the application properties in Spring Boot?
 A: You can configure the application properties in Spring Boot by using the application.properties or application.yml file.

Q: What is the Spring Boot Actuator? 
A: The Spring Boot Actuator is a module of Spring Boot that provides endpoints to monitor and manage the application.
Q: How do you enable the Spring Boot Actuator in an application? 
A: You can enable the Spring Boot Actuator in an application by adding the necessary dependencies and configuration properties to the project.

Q: What is Spring Boot Data JPA?
 A: Spring Boot Data JPA is a module of Spring Boot that provides support for the Java Persistence API (JPA) for data access.

Q: What is Spring Boot Security? 
A: Spring Boot Security is a module of Spring Boot that provides support for securing web applications.

Q: How do you configure database connection in Spring Boot? 
A: You can configure database connection in Spring Boot by specifying the necessary properties in the application.properties or application.yml file.

Q: How do you create a RESTful web service in Spring Boot? 
A: You can create a RESTful web service in Spring Boot by using the @RestController and @RequestMapping annotations, and by returning data in JSON format.

Q: What is Spring Boot Test?
 A: Spring Boot Test is a module of Spring Boot that provides support for testing Spring-based applications.

what is swagger
==================
whenever we have to write some Rest APIs at that stage we have to give documentation to rest api we use swagger for documnetation purpose and 
then swagger actually runs on url and we give that url to our client of API .swagger is used for documnettaion in our project.

can we change port of tomcat server 
yes we can change from application .properties wheere server.port mention .we can change from there.

if we dont want to run our application on tomcat server is there any way.
yes we cange enbedded server from to mcat server to jetty .thrre is way you jetty configured this also done using application.properties 
but you have to make sure thatt jetty dependancy should be add in pom.xml file.




